{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/postgresql.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/exec.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c4","peg$literalExpectation","peg$c6","peg$c8","peg$c16","peg$c19","peg$c20","k","resource","prefix","toLowerCase","peg$c22","peg$c25","peg$c28","peg$c31","peg$c33","peg$c36","peg$c38","peg$c45","peg$c47","peg$c49","peg$c55","peg$c58","peg$c60","peg$c62","peg$c76","peg$c78","peg$c80","peg$c82","peg$c85","peg$c87","peg$c89","peg$c104","peg$c106","peg$c108","peg$c110","peg$c113","peg$c115","peg$c117","peg$c123","peg$c127","peg$c130","peg$c132","peg$c134","peg$c137","peg$c139","peg$c142","peg$c144","peg$c146","peg$c148","peg$c150","peg$c153","peg$c155","peg$c157","peg$c159","peg$c161","peg$c163","peg$c165","peg$c169","peg$c173","peg$c175","peg$c177","peg$c179","peg$c182","peg$c184","peg$c186","peg$c188","peg$c193","peg$c195","peg$c198","peg$c200","peg$c203","peg$c205","peg$c207","peg$c209","peg$c211","peg$c214","peg$c217","peg$c219","peg$c221","peg$c223","peg$c226","peg$c232","peg$c234","peg$c236","peg$c238","peg$c240","peg$c242","peg$c244","peg$c246","peg$c248","peg$c251","peg$c255","peg$c258","peg$c260","peg$c265","head","tail","createList","peg$c278","e","alias","expr","as","peg$c285","peg$c287","peg$c289","peg$c291","peg$c298","peg$c300","peg$c303","peg$c305","peg$c307","unshift","forEach","tableInfo","table","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c317","peg$c319","peg$c344","peg$c347","peg$c350","peg$c353","peg$c364","peg$c387","createBinaryExprChain","peg$c389","peg$c396","peg$c398","peg$c400","peg$c402","peg$c404","peg$c406","peg$c414","peg$c421","peg$c423","peg$c425","peg$c427","peg$c429","peg$c431","peg$c434","peg$c436","peg$c439","peg$c441","peg$c443","peg$c447","peg$c451","peg$c458","reservedMap","peg$c467","peg$c468","peg$c469","peg$classExpectation","peg$c470","chars","peg$c471","peg$c472","peg$c474","peg$c475","peg$c476","peg$c480","peg$c481","peg$c482","peg$c483","peg$c484","peg$c485","peg$c487","peg$c492","peg$c499","peg$c501","peg$c503","peg$c505","peg$c507","peg$c509","peg$c511","peg$c513","peg$c515","peg$c517","peg$c522","peg$c524","peg$c526","peg$c528","peg$c536","peg$c538","peg$c540","peg$c543","peg$c549","peg$c551","peg$c553","peg$c555","peg$c557","peg$c559","peg$c561","peg$c563","peg$c565","peg$c567","peg$c569","peg$c571","peg$c573","peg$c575","peg$c577","peg$c579","peg$c581","peg$c583","peg$c585","peg$c587","peg$c589","peg$c604","peg$c605","peg$c611","peg$c612","peg$c613","peg$c614","peg$c616","peg$c619","peg$c622","peg$c625","peg$c628","peg$c631","peg$c634","peg$c637","peg$c640","peg$c643","peg$c646","peg$c649","peg$c651","peg$c652","peg$c661","peg$c665","peg$c666","peg$c667","peg$c668","peg$c669","peg$c670","peg$c671","peg$c672","peg$c675","peg$c677","peg$c679","peg$c681","peg$c683","peg$c685","peg$c687","peg$c690","peg$c692","peg$c694","peg$c696","peg$c698","peg$c700","peg$c703","peg$c706","peg$c708","peg$c710","peg$c712","peg$c714","peg$c716","peg$c719","peg$c723","peg$c726","peg$c728","peg$c730","peg$c732","peg$c735","peg$c738","peg$c741","peg$c744","peg$c748","peg$c750","peg$c752","peg$c754","peg$c756","peg$c758","peg$c760","peg$c762","peg$c764","peg$c766","peg$c768","peg$c770","peg$c772","peg$c774","peg$c776","peg$c778","peg$c780","peg$c783","peg$c786","peg$c789","peg$c792","peg$c795","peg$c799","peg$c802","peg$c805","peg$c808","peg$c812","peg$c815","peg$c818","peg$c821","peg$c824","peg$c827","peg$c830","peg$c833","peg$c836","peg$c839","peg$c842","peg$c845","peg$c848","peg$c850","peg$c852","peg$c854","peg$c856","peg$c858","peg$c860","peg$c863","peg$c866","peg$c869","peg$c872","peg$c875","peg$c878","peg$c881","peg$c884","peg$c887","peg$c890","peg$c893","peg$c896","peg$c899","peg$c902","peg$c905","peg$c908","peg$c911","peg$c914","peg$c917","peg$c920","peg$c923","peg$c926","peg$c929","peg$c932","peg$c935","peg$c938","peg$c941","peg$c944","peg$c947","peg$c950","peg$c953","peg$c956","peg$c959","peg$c965","peg$c974","peg$c977","peg$c980","peg$c983","peg$c986","peg$c989","peg$c992","peg$c995","peg$c998","peg$c1001","peg$c1004","peg$c1006","peg$c1008","peg$c1010","peg$c1012","peg$c1014","peg$c1016","peg$c1019","peg$c1022","peg$c1026","peg$c1029","peg$c1034","peg$c1037","peg$c1040","peg$c1043","peg$c1046","peg$c1048","peg$c1050","peg$c1052","peg$c1054","peg$c1056","peg$c1058","peg$c1060","peg$c1062","peg$c1064","peg$c1066","peg$c1068","peg$c1070","peg$c1072","peg$c1074","peg$c1076","peg$c1078","peg$c1080","peg$c1082","peg$c1086","peg$c1087","peg$c1088","peg$c1108","dataType","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsecrud_stmt","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","peg$parsecmd_stmt","s9","s11","peg$parseKW_DROP","peg$parseKW_TABLE","peg$parsetable_ref_list","a","tt","db","keyword","peg$parseKW_INDEX","peg$parsecolumn_ref","peg$parseKW_ON","peg$parsetable_name","peg$parseALTER_ALGORITHM","peg$parseALTER_LOCK","peg$parsedrop_index_opt","op","peg$c94","peg$parsedrop_stmt","s13","s15","s17","s19","peg$parseKW_CREATE","peg$parseKW_TEMPORARY","peg$parseKW_IF_NOT_EXISTS","s8","peg$parseLPAREN","peg$parsecreate_definition","peg$parseCOMMA","peg$parseRPAREN","peg$parsecreate_table_definition","peg$parsetable_option","peg$parsetable_options","substr","peg$parseident_start","peg$parseKW_IGNORE","peg$parseKW_REPLACE","peg$parseKW_AS","peg$parseunion_stmt","tp","ife","to","ir","qe","temporary","if_not_exists","ignore_replace","query_expr","create_definitions","table_options","peg$parsecreate_like_table","peg$parseKW_LIKE","peg$parsecreate_like_table_simple","parentheses","lt","like","peg$c13","peg$parsecreate_table_stmt","s18","s20","s21","s23","s25","s27","s29","peg$parseKW_CONSTRAINT","peg$parseident_name","peg$parsetrigger_event","peg$parseKW_OR","peg$parsetrigger_event_list","peg$parseKW_FROM","args","kw","peg$parsetrigger_deferrable","ob","peg$parsetrigger_for_row","peg$parseKW_WHEN","peg$parseexpr","cond","peg$parsetrigger_when","peg$parseproc_func_call","kc","te","tn","fr","de","fe","tw","fct","constraint","events","deferrable","for_each","when","execute","constraint_type","constraint_kw","peg$parsecreate_constraint_trigger","s12","s14","s16","peg$parseliteral_string","peg$parseKW_WITH","w","v","f","extension","commonStrToLiteral","with","schema","version","peg$c9","peg$parsecreate_extension_stmt","s24","s26","s28","s30","peg$parseKW_UNIQUE","peg$parseKW_CONCURRENTLY","peg$parseident","peg$parseindex_type","peg$parsecolumn_order","peg$parsecolumn_order_list","peg$parseindex_option","peg$parseindex_options_list","peg$parseKW_TABLESPACE","peg$parsewhere_clause","co","on","ta","um","cols","wr","ts","index_type","concurrently","index","on_kw","index_using","index_columns","with_before_where","tablespace","where","peg$parsecreate_index_stmt","peg$parseKW_TEMP","peg$parseKW_SEQUENCE","peg$parsealias_ident","peg$parsecreate_sequence_definition","peg$parsecreate_sequence_definition_list","sequence","peg$parsecreate_sequence","peg$parseKW_DATABASE","peg$parseKW_SCHEME","peg$parsecreate_option_character_set","peg$parsecreate_db_definition","database","peg$parsecreate_db_stmt","peg$parsecreate_stmt","peg$parseKW_TRUNCATE","peg$parsetruncate_stmt","peg$parseKW_RENAME","peg$parsetable_to_item","peg$parsetable_to_list","tg","dt","peg$parserename_stmt","peg$parseKW_CALL","peg$parsecall_stmt","peg$parseKW_USE","peg$parseuse_stmt","peg$parseKW_ALTER","peg$parsealter_action","peg$parsealter_action_list","peg$parsealter_table_stmt","peg$parseKW_SET","peg$parseKW_GLOBAL","peg$parseKW_SESSION","peg$parseKW_LOCAL","peg$parseKW_PERSIST","peg$parseKW_PERSIST_ONLY","peg$parseassign_stmt","peg$parseset_stmt","peg$parseKW_LOCK","peg$parselock_mode","lm","nw","tables","map","lock_mode","nowait","peg$parselock_stmt","peg$parseKW_SHOW","peg$parseshow_stmt","peg$parseKW_UPDATE","peg$parseset_item","peg$parseset_list","peg$parsereturning_stmt","set","returning","peg$parseupdate_stmt","peg$parsereplace_insert","peg$parseKW_INTO","peg$parseinsert_partition","peg$parsecolumn_list","peg$parseinsert_value_clause","ri","isArray","row","idx","values","partition","peg$c370","peg$parsereplace_insert_stmt","peg$parseinsert_no_columns_stmt","peg$parseKW_DELETE","peg$parsefrom_clause","info","addition","peg$c361","peg$parsedelete_stmt","peg$parseproc_stmt","peg$parseproc_stmts","peg$parseselect_stmt","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseorder_by_clause","peg$parselimit_clause","_next","union","_orderby","_limit","peg$c2","peg$parseKW_BY","peg$parseliteral_numeric","peg$parsesequence_definition_increment","peg$parsesequence_definition_minval","peg$parsesequence_definition_maxval","peg$parsesequence_definition_start","peg$parsesequence_definition_cache","peg$parsesequence_definition_cycle","peg$parsesequence_definition_owned","s10","nf","peg$parsecollate_expr","peg$parseKW_ASC","peg$parseKW_DESC","collate","opclass","order","nulls","peg$parsecreate_column_definition","peg$parsecreate_index_definition","peg$parsecreate_fulltext_spatial_index_definition","peg$parseconstraint_name","peg$parsecte_column_definition","peg$parseindex_options","id","definition","index_options","peg$parsecreate_constraint_primary","peg$parseKW_KEY","peg$parsecolumn","u","peg$parsecreate_constraint_unique","peg$parsereference_definition","reference_definition","peg$parsecreate_constraint_foreign","peg$parsecreate_constraint_definition","peg$parsecolumn_definition_opt","peg$parseliteral_not_null","peg$parseliteral_null","peg$parsedefault_expr","df","default_val","nullable","peg$c73","peg$parsecolumn_constraint","auto_increment","unique_or_primary","filter","peg$c63","peg$parsekeyword_comment","comment","peg$c83","peg$parsecolumn_format","column_format","peg$parsestorage","storage","peg$parsecreate_option_character_set_kw","peg$parseKW_ASSIGIN_EQUAL","character_set","symbol","peg$c69","cdo","peg$parsedata_type","opt","peg$c70","peg$parsecolumn_definition_opt_list","peg$parseKW_COLLATE","peg$parseKW_DEFAULT","peg$parseliteral","peg$parseKW_ADD","peg$parseKW_COLUMN","cd","action","peg$parseALTER_ADD_COLUMN","peg$parseALTER_DROP_COLUMN","peg$parseALTER_ADD_INDEX_OR_KEY","fsid","peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX","peg$parseKW_TO","peg$parseALTER_RENAME_TABLE","algorithm","lock","peg$parseKW_FULLTEXT","peg$parseKW_SPATIAL","od","ou","peg$parseKW_REFERENCES","peg$parseon_reference","match","on_delete","on_update","ro","peg$parsereference_option","peg$parseKW_INSERT","peg$parsecolumn_ref_list","peg$c170","peg$parseKW_COMMENT","peg$c215","peg$c224","peg$c227","peg$parseselect_stmt_nake","parentheses_symbol","peg$parsewith_clause","cte","peg$parsecte_definition","peg$parseKW_RECURSIVE","recursive","stmt","peg$parsedistinct_on","peg$parseKW_DISTINCT","console","lo","peg$c267","s22","peg$parseKW_SELECT","peg$parse___","peg$parsequery_option","opts","peg$c269","peg$parseoption_clause","peg$parsecolumn_clause","peg$parseKW_GROUP","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","g","h","win","distinct","groupby","having","orderby","limit","window","peg$c268","peg$parseOPT_SQL_CALC_FOUND_ROWS","peg$parseOPT_SQL_CACHE","peg$parseOPT_SQL_NO_CACHE","peg$parseOPT_SQL_BIG_RESULT","peg$parseOPT_SQL_SMALL_RESULT","peg$parseOPT_SQL_BUFFER_RESULT","peg$parseSTAR","peg$parsecolumn_list_item","peg$c272","peg$parsearray_index","peg$parseLBRAKE","peg$parsenumber","peg$parseRBRAKE","brackets","number","peg$parseexpr_item","array_index","tbl","peg$parsestring_constants_escape","peg$parseKW_DOUBLE_COLON","peg$parseadditive_operator","peg$parsemultiplicative_operator","peg$parsealias_clause","target","operator","peg$parseDOT","peg$parseKW_USING","result","peg$c294","kbs","peg$parseKW_KEY_BLOCK_SIZE","peg$c296","peg$c306","peg$parsetable_base","peg$parsetable_ref","peg$parsejoin_op","using","peg$parseon_clause","peg$c311","peg$c312","peg$parsetable_join","peg$parseKW_DUAL","peg$parsevalue_clause","peg$c315","peg$parsefunc_call","re","tablesample","repeatable","peg$c320","peg$c321","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_INNER","obj","peg$c326","peg$c328","peg$parsevar_decl","peg$parseor_and_where_expr","peg$parseKW_WHERE","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$parseKW_BETWEEN","peg$parseKW_AND","peg$c342","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$c358","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","peg$parseKW_OFFSET","i1","res","seperator","peg$c359","peg$parseadditive_expr","peg$parseKW_VALUES","peg$c366","peg$parseKW_RETURNING","peg$parsevalue_item","peg$parsevalue_list","el","peg$c377","peg$parseinterval_expr","peg$parseKW_INTERVAL","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$c379","peg$parsecase_expr","condition_list","otherwise","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","peg$c381","peg$parseKW_THEN","peg$parseKW_ELSE","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseor_expr","createUnaryExpr","peg$parseunary_expr","createBinaryExpr","peg$c386","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","nk","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsein_op","right","peg$c419","peg$parsein_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","pop","tableName","peg$c408","peg$c409","peg$parseis_op_right","peg$parseKW_ILIKE","peg$parselike_op","peg$parselike_op_right","peg$parseOPERATOR_CONCATENATION","peg$parseDOUBLE_WELL_ARROW","peg$parseWELL_ARROW","peg$parsejsonb_op_right","peg$parsecomparison_op_right","peg$parseKW_IN","peg$parsemultiplicative_expr","list","peg$parseaggr_func","peg$parsewindow_func","peg$c593","peg$parseKW_CAST","peg$c594","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c595","scale","peg$c596","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c597","peg$parsecast_expr","peg$c449","charAt","peg$parsesingle_char","peg$parseDOUBLE_ARROW","peg$parseSINGLE_ARROW","arrow","peg$c454","peg$c455","peg$c456","peg$parsequoted_ident","JSON","stringify","peg$c461","peg$c463","test","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parsecolumn_name","peg$parseident_part","peg$parseon_update_current_timestamp","peg$parseKW_CURRENT_TIMESTAMP","peg$c490","peg$parseover_partition","peg$parseKW_COUNT","peg$parseKW_GROUP_CONCAT","peg$parsestar_expr","peg$parsedistinct_args","peg$parsecount_arg","over","peg$parseliteral_array","arg","or","bc","within_group_orderby","peg$c527","peg$c529","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$parseKW_ARRAY_AGG","peg$parseaggr_array_agg","peg$parseKW_WIN_FNS_RANK","peg$parsewindow_fun_rank","peg$parseKW_LAG_LEAD","peg$parseconsider_nulls_clause","consider_nulls","peg$parsewindow_fun_laglead","peg$parseKW_FIRST_LAST_VALUE","peg$parsewindow_fun_firstlast","peg$c531","peg$parsetrim_rem","peg$parsetrim_position","rm","peg$c541","tr","peg$c544","peg$parsetrim_func_clause","peg$parseproc_func_name","peg$parsescalar_func","peg$c546","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_TIME","peg$parseKW_DATE","field","cast_type","source","peg$c591","peg$parseextract_func","up","peg$c547","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_USER","peg$parseKW_USER","peg$parseKW_SESSION_USER","peg$parseKW_SYSTEM_USER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_DATETIME","ca","peg$parsesingle_quote_char","peg$c610","peg$parseliteral_datetime","peg$parseKW_ARRAY","expr_list","peg$parseKW_NULL","peg$parseKW_NOT_NULL","fs","peg$c607","peg$c608","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c655","exp","peg$c656","peg$c657","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseKW_CHAR","peg$parseKW_VARCHAR","peg$parseKW_NUMERIC","peg$parseKW_INT","peg$parseKW_SMALLINT","peg$parseKW_TINYINT","peg$parseKW_TINYTEXT","peg$parseKW_TEXT","peg$parseKW_MEDIUMTEXT","peg$parseKW_LONGTEXT","peg$parseKW_BIGINT","peg$parseKW_FLOAT","peg$parseKW_DOUBLE","peg$parseKW_VAR_PRE","peg$parseKW_VAR__PRE_AT_AT","peg$parseKW_VAR__PRE_AT","peg$parseKW_VAR_PRE_DOLLAR","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parseEOF","varList","peg$parseKW_RETURN","peg$parseproc_expr","peg$parsereturn_stmt","vars","peg$parsewithout_prefix_var_decl","peg$parseKW_ASSIGN","ltable","rtable","peg$parseproc_join","peg$parseproc_additive_expr","peg$parseproc_primary_list","peg$parseproc_array","peg$parseproc_multiplicative_expr","peg$parseproc_primary","peg$c1095","peg$c1097","peg$c1102","peg$parsemem_chain","members","peg$parsenumeric_type","peg$parsecharacter_string_type","array","peg$c1104","peg$parsearray_type","peg$parsedatetime_type","peg$parseKW_JSON","peg$parseKW_JSONB","peg$parsejson_type","peg$parseKW_GEOMETRY","peg$parsegeometry_type","peg$c1117","peg$parsetext_type","peg$parseKW_UUID","peg$parseuuid_type","peg$parseKW_BOOL","peg$parseKW_BOOLEAN","peg$parseboolean_type","peg$parseKW_ENUM","peg$parseenum_type","peg$parseKW_SERIAL","peg$parseserial_interval_type","peg$c1107","peg$parsenumeric_type_suffix","peg$parseKW_ZEROFILL","un","ze","peg$c1109","suffix","peg$c1111","peg$c1112","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","keys","columnInfo","split","strOrLiteral","require","PARSER_NAME","DEFAULT_OPT","parserOpt","commonOptionConnector","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","replaceParams","params","replaceParamsInner","onPartitionsToSQL","partitions","arrayStructTypeToSQL","anglebracket","dataTypeUpper","field_name","field_type","commentToSQL","triggerEventToSQL","event","kwArgs","columnRefToSQL","returningToSQL","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","constructArgsList","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","castToSQL","expression","symbolChar","arrayDimension","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","separator","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","withExprStr","setToSQL","sets","clauses","setItem","valuesToSQL","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","tableToSQL","unnestExpr","withOffset","with_offset","unnestToSQL","schemaStr","valueSQL","tableSampleSQL","baseTable","joinExpr","tableOptionToSQL","tableOption","sql","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","top","windowInfo","withInfo","distinctToSQL","columnsToSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","arrayStructValueToSQL","exprList","arrayPath","array_path","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","withinGroup","window_func","assign","leftVar","rightVal","binary_expr","rstr","isBetween","case","conditions","len","cast","column_ref","extract","castType","function","interval","intervalExpr","show","struct","namedWindowExprInfo","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","enforced","referenceDefinition","constraintSQL","columnReferenceDefinitionToSQL","columnOffsetToSQL","columnDataType","reference","onDelete","columnOrder","columnDefinitionToSQL","columnDefinition","columnOpt","characterSet","check","defaultOpt","autoIncrement","uniquePrimary","columnFormat","columnOption","getDual","star","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","createDefinition","firstAfter","first_after","ifNotExists","oldColumn","old_column","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lockInfo","pgLock","execVariablesToSQL","varName","select","unionToSQL","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","tableOptions","ignoreReplace","queryExpr","likeType","likeTableName","createTableToSQL","constraintKw","createTriggerToSQL","withName","createExtensionToSQL","fileStream","filestream_on","include","indexColumns","indexUsing","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","withBeforeWhere","withIndexOpt","includeColumns","createIndexToSQL","createSequenceToSQL","createDatabaseToSQL","delete","exec","parameters","update","insert","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","unlock","fun","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"postgresql.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          // => multiple_stmt | cmd_stmt | crud_stmt\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            /*\n            // is in reality: { tableList: any[]; columnList: any[]; ast: T; }\n            export type AstStatement<T> = T;\n             => AstStatement<crud_stmt[]> */\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n            \tast: cur\n            }\n          },\n      peg$c2 = function(head, tail, ob, l) {\n           /* export interface union_stmt_node extends select_stmt_node  {\n               _next: union_stmt_node;\n               union: 'union' | 'union all';\n            }\n           => AstStatement<union_stmt_node>\n           */\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][5]\n              cur.union = tail[i][3] ? 'union all' : 'union'\n              cur = cur._next\n            }\n            if(ob) head._orderby = ob\n            if(l) head._limit = l\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c3 = \"extension\",\n      peg$c4 = peg$literalExpectation(\"EXTENSION\", true),\n      peg$c5 = \"schema\",\n      peg$c6 = peg$literalExpectation(\"SCHEMA\", true),\n      peg$c7 = \"version\",\n      peg$c8 = peg$literalExpectation(\"VERSION\", true),\n      peg$c9 = function(a, e, ife, n, w, s, v, f) {\n            /*\n             export type nameOrLiteral = literal_string | { type: 'same', value: string; };\n            => {\n                type: 'create';\n                keyword: 'extension';\n                if_not_exists?: 'if not exists';\n                extension: nameOrLiteral;\n                with: 'with';\n                schema: nameOrLiteral;\n                version: nameOrLiteral;\n                from: nameOrLiteral;\n              }\n            */\n            return {\n              type: 'create',\n              keyword: e.toLowerCase(),\n              if_not_exists: ife && ife[0].toLowerCase(),\n              extension: commonStrToLiteral(n),\n              with: w && w[0].toLowerCase(),\n              schema: commonStrToLiteral(s && s[2].toLowerCase()), // <== wont that be a bug ?\n              version: commonStrToLiteral(v && v[2]),\n              from: commonStrToLiteral(f && f[2]),\n            }\n          },\n      peg$c10 = function(head, tail) {\n          // => create_option_character_set[]\n          return createList(head, tail, 1)\n        },\n      peg$c11 = function(a, k, ife, t, c) {\n            /*\n            export type create_db_stmt = {\n              type: 'create',\n              keyword: 'database',\n              if_not_exists?: 'if not exists',\n              database: string,\n              create_definition?: create_db_definition\n            }\n            => AstStatement<create_db_stmt>\n            */\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'database',\n                if_not_exists: ife && ife[0].toLowerCase(),\n                database: t,\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c12 = function(a, tp, ife, t, c, to, ir, as, qe) {\n            /*\n            export type create_table_stmt_node = create_table_stmt_node_simple | create_table_stmt_node_like;\n            export interface create_table_stmt_node_base {\n              type: 'create';\n              keyword: 'table';\n              temporary?: 'temporary';\n              if_not_exists?: 'if not exists';\n              table: table_ref_list;\n            }\n            export interface create_table_stmt_node_simple extends create_table_stmt_node_base{\n              ignore_replace?: 'ignore' | 'replace';\n              as?: 'as';\n              query_expr?: union_stmt_node;\n              create_definition?: create_table_definition;\n              table_options?: table_options;\n            }\n            => AstStatement<create_table_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                table: t,\n                ignore_replace: ir && ir[0].toLowerCase(),\n                as: as && as[0].toLowerCase(),\n                query_expr: qe && qe.ast,\n                create_definitions: c,\n                table_options: to\n              }\n            }\n          },\n      peg$c13 = function(a, tp, ife, t, lt) {\n            /*\n\n            export interface create_table_stmt_node_like extends create_table_stmt_node_base{\n              like: create_like_table;\n            }\n            => AstStatement<create_table_stmt_node>;\n            */\n            if(t) t.forEach(tt => tableList.add(`create::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'table',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                table: t,\n                like: lt\n              }\n            }\n          },\n      peg$c14 = function(a, tp, ife, t, as, c) {\n            /*\n            export type create_sequence_stmt = {\n              type: 'create',\n              keyword: 'sequence',\n              temporary?: 'temporary' | 'temp',\n              if_not_exists?: 'if not exists',\n              table: table_ref_list,\n              create_definition?: create_sequence_definition_list\n            }\n            => AstStatement<create_sequence_stmt>\n            */\n            t.as = as && as[2]\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                keyword: 'sequence',\n                temporary: tp && tp.toLowerCase(),\n                if_not_exists: ife && ife[0].toLowerCase(),\n                sequence: [t],\n                create_definitions: c,\n              }\n            }\n          },\n      peg$c15 = \"increment\",\n      peg$c16 = peg$literalExpectation(\"INCREMENT\", true),\n      peg$c17 = function(k, b, n) {\n          /*\n          export type sequence_definition = { \"resource\": \"sequence\", prefix?: string,value: literal | column_ref }\n          => sequence_definition\n          */\n          return {\n            resource: 'sequence',\n            prefix: b ? `${k.toLowerCase()} by` : k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c18 = \"minvalue\",\n      peg$c19 = peg$literalExpectation(\"MINVALUE\", true),\n      peg$c20 = function(k, n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c21 = \"no\",\n      peg$c22 = peg$literalExpectation(\"NO\", true),\n      peg$c23 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: 'no minvalue'\n            }\n          }\n        },\n      peg$c24 = \"maxvalue\",\n      peg$c25 = peg$literalExpectation(\"MAXVALUE\", true),\n      peg$c26 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: 'no maxvalue'\n            }\n          }\n        },\n      peg$c27 = \"start\",\n      peg$c28 = peg$literalExpectation(\"START\", true),\n      peg$c29 = function(k, w, n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: w ? `${k.toLowerCase()} with` : k.toLowerCase(),\n            value: n\n          }\n        },\n      peg$c30 = \"cache\",\n      peg$c31 = peg$literalExpectation(\"CACHE\", true),\n      peg$c32 = \"cycle\",\n      peg$c33 = peg$literalExpectation(\"CYCLE\", true),\n      peg$c34 = function(n) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            value: {\n              type: 'origin',\n              value: n ? 'no cycle' : 'cycle'\n            }\n          }\n        },\n      peg$c35 = \"owned\",\n      peg$c36 = peg$literalExpectation(\"OWNED\", true),\n      peg$c37 = \"none\",\n      peg$c38 = peg$literalExpectation(\"NONE\", true),\n      peg$c39 = function() {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: 'owned by',\n            value: {\n              type: 'origin',\n              value: 'none'\n            }\n          }\n        },\n      peg$c40 = function(n, col) {\n          // => sequence_definition\n          return {\n            resource: 'sequence',\n            prefix: 'owned by',\n            value: col\n          }\n        },\n      peg$c41 = function(head, tail) {\n          // => create_sequence_definition[]\n          return createList(head, tail, 1)\n      },\n      peg$c42 = function(a, kw, t, co, n, on, ta, um, cols, wr, ts, w) {\n          /*\n          export interface create_index_stmt_node {\n            type: 'create';\n            index_type?: 'unique';\n            keyword: 'index';\n            concurrently?: 'concurrently';\n            index: string;\n            on_kw: string;\n            table: table_name;\n            index_using?: index_type;\n            index_columns: column_order[];\n            with?: index_option[];\n            with_before_where: true;\n            tablespace?: {type: 'origin'; value: string; }\n            where?: where_clause;\n          }\n          => AstStatement<create_index_stmt_node>\n          */\n          return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a[0].toLowerCase(),\n                index_type: kw && kw.toLowerCase(),\n                keyword: t.toLowerCase(),\n                concurrently: co && co.toLowerCase(),\n                index: n,\n                on_kw: on[0].toLowerCase(),\n                table: ta,\n                index_using: um,\n                index_columns: cols,\n                with: wr && wr[4],\n                with_before_where: true,\n                tablespace: ts && { type: 'origin', value: ts[2] },\n                where: w,\n              }\n          }\n        },\n      peg$c43 = function(head, tail) {\n          // => column_order[]\n          return createList(head, tail)\n        },\n      peg$c44 = \"nulls\",\n      peg$c45 = peg$literalExpectation(\"NULLS\", true),\n      peg$c46 = \"first\",\n      peg$c47 = peg$literalExpectation(\"FIRST\", true),\n      peg$c48 = \"last\",\n      peg$c49 = peg$literalExpectation(\"LAST\", true),\n      peg$c50 = function(c, ca, op, o, nf) {\n          /*\n          => {\n            column: expr;\n            collate: collate_expr;\n            opclass: ident;\n            order: 'asc' | 'desc';\n            nulls: 'nulls last' | 'nulls first';\n          }\n          */\n          return {\n            column: c,\n            collate: ca,\n            opclass: op,\n            order: o && o.toLowerCase() || 'asc',\n            nulls: nf && `${nf[0].toLowerCase()} ${nf[2].toLowerCase()}`,\n          }\n        },\n      peg$c51 = function(t) {\n          // => { type: 'like'; table: table_ref_list; }\n          return {\n            type: 'like',\n            table: t\n          }\n        },\n      peg$c52 = function(e) {\n           // => create_like_table_simple & { parentheses?: boolean; }\n            e.parentheses = true;\n            return e;\n        },\n      peg$c53 = function(head, tail) {\n            // => create_definition[]\n            return createList(head, tail);\n          },\n      peg$c54 = \"auto_increment\",\n      peg$c55 = peg$literalExpectation(\"AUTO_INCREMENT\", true),\n      peg$c56 = function(a) {\n          // => { auto_increment: 'auto_increment'; }\n          return { auto_increment: a.toLowerCase() }\n        },\n      peg$c57 = \"unique\",\n      peg$c58 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c59 = \"key\",\n      peg$c60 = peg$literalExpectation(\"KEY\", true),\n      peg$c61 = \"primary\",\n      peg$c62 = peg$literalExpectation(\"PRIMARY\", true),\n      peg$c63 = function(u) {\n          // => { unique_or_primary: 'unique' | 'primary key'; }\n          const unique_or_primary = []\n          if (u) unique_or_primary.push(u[0], u[2])\n          return { unique_or_primary: unique_or_primary.filter(v => v).join(' ').toLowerCase('') }\n        },\n      peg$c64 = function(co) {\n          // => { comment: keyword_comment; }\n          return { comment: co }\n        },\n      peg$c65 = function(ca) {\n          // => { collate: collate_expr; }\n          return { collate: ca }\n        },\n      peg$c66 = function(cf) {\n          // => { column_format: column_format; }\n          return { column_format: cf }\n        },\n      peg$c67 = function(s) {\n          // => { storage: storage }\n          return { storage: s }\n        },\n      peg$c68 = function(re) {\n          // => { reference_definition: reference_definition; }\n          return { reference_definition: re }\n        },\n      peg$c69 = function(t, s, v) {\n          // => { character_set: collate_expr }\n          return { character_set: { type: t, value: v, symbol: s }}\n        },\n      peg$c70 = function(head, tail) {\n          /*\n            => {\n              nullable?: column_constraint['nullable'];\n              default_val?: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n            }\n            */\n          let opt = head\n          for (let i = 0; i < tail.length; i++) {\n            opt = { ...opt, ...tail[i][1] }\n          }\n          return opt\n        },\n      peg$c71 = function(c, d, cdo) {\n            /*\n            => {\n              column: column_ref;\n              definition: data_type;\n              nullable: column_constraint['nullable'];\n              default_val: column_constraint['default_val'];\n              auto_increment?: 'auto_increment';\n              unique_or_primary?: 'unique' | 'primary key';\n              comment?: keyword_comment;\n              collate?: collate_expr;\n              column_format?: column_format;\n              storage?: storage;\n              reference_definition?: reference_definition;\n              resource: 'column';\n            }\n            */\n            columnList.add(`create::${c.table}::${c.column}`)\n            return {\n              column: c,\n              definition: d,\n              resource: 'column',\n              ...(cdo || {})\n            }\n          },\n      peg$c72 = function(n, df) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c73 = function(df, n) {\n          // => { nullable: literal_null | literal_not_null; default_val: default_expr; }\n          if (n && !n.value) n.value = 'null'\n          return {\n            default_val: df,\n            nullable: n\n          }\n        },\n      peg$c74 = function(s, ca) {\n          // => { type: 'collate'; symbol: '=' | null; value: ident; }\n          return {\n            type: 'collate',\n            symbol: s,\n            value: ca,\n          }\n        },\n      peg$c75 = \"column_format\",\n      peg$c76 = peg$literalExpectation(\"COLUMN_FORMAT\", true),\n      peg$c77 = \"fixed\",\n      peg$c78 = peg$literalExpectation(\"FIXED\", true),\n      peg$c79 = \"dynamic\",\n      peg$c80 = peg$literalExpectation(\"DYNAMIC\", true),\n      peg$c81 = \"default\",\n      peg$c82 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c83 = function(k, f) {\n          // => { type: 'column_format'; value: 'fixed' | 'dynamic' | 'default'; }\n          return {\n            type: 'column_format',\n            value: f.toLowerCase()\n          }\n        },\n      peg$c84 = \"storage\",\n      peg$c85 = peg$literalExpectation(\"STORAGE\", true),\n      peg$c86 = \"disk\",\n      peg$c87 = peg$literalExpectation(\"DISK\", true),\n      peg$c88 = \"memory\",\n      peg$c89 = peg$literalExpectation(\"MEMORY\", true),\n      peg$c90 = function(k, s) {\n          // => { type: 'storage'; value: 'disk' | 'memory' }\n          return {\n            type: 'storage',\n            value: s.toLowerCase()\n          }\n        },\n      peg$c91 = function(ce) {\n          // => { type: 'default'; value: literal | expr; }\n          return {\n            type: 'default',\n            value: ce\n          }\n        },\n      peg$c92 = function(head, tail) {\n          // => (ALTER_ALGORITHM | ALTER_LOCK)[]\n          return createList(head, tail, 1)\n        },\n      peg$c93 = function(a, r, t) {\n            /*\n            export interface drop_stmt_node {\n              type: 'drop';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<drop_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: t\n              }\n            };\n          },\n      peg$c94 = function(a, r, i, t, op) {\n            /*\n            export interface drop_index_stmt_node {\n              type: 'drop';\n              keyword: string;\n              name: column_ref;\n              table: table_name;\n              options?: drop_index_opt;\n            }\n            => AstStatement<drop_index_stmt_node>\n            */\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: r.toLowerCase(),\n                name: i,\n                table: t,\n                options: op\n              }\n            };\n          },\n      peg$c95 = function(a, kw, t) {\n            /*\n            export interface truncate_stmt_node {\n              type: 'trucate';\n              keyword: 'table';\n              name: table_ref_list;\n            }\n            => AstStatement<truncate_stmt_node>\n            */\n            if(t) t.forEach(tt => tableList.add(`${a}::${tt.db}::${tt.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: a.toLowerCase(),\n                keyword: kw && kw.toLowerCase() || 'table',\n                name: t\n              }\n            };\n          },\n      peg$c96 = function(d) {\n            /*\n            export interface use_stmt_node {\n              type: 'use';\n              db: ident;\n            }\n            => AstStatement<use_stmt_node>\n            */\n            tableList.add(`use::${d}::null`);\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'use',\n                db: d\n              }\n            };\n          },\n      peg$c97 = function(t, e) {\n            /*\n            export interface alter_table_stmt_node {\n              type: 'alter';\n              table: table_ref_list;\n              expr: alter_action_list;\n            }\n            => AstStatement<alter_table_stmt_node>\n            */\n            if (t && t.length > 0) t.forEach(table => tableList.add(`alter::${table.db}::${table.table}`));\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'alter',\n                table: t,\n                expr: e\n              }\n            };\n          },\n      peg$c98 = function(head, tail) {\n            // => alter_action[]\n            return createList(head, tail);\n          },\n      peg$c99 = function(kc, cd) {\n            /*\n            => {\n              action: 'add';\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } & create_column_definition;\n            */\n            return {\n              action: 'add',\n              ...cd,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c100 = function(kc, c) {\n            /* => {\n              action: 'drop';\n              collumn: column_ref;\n              keyword: KW_COLUMN;\n              resource: 'column';\n              type: 'alter';\n            } */\n            return {\n              action: 'drop',\n              column: c,\n              keyword: kc,\n              resource: 'column',\n              type: 'alter',\n            }\n          },\n      peg$c101 = function(id) {\n             /* => {\n               action: 'add';\n               type: 'alter';\n               } & create_index_definition */\n            return {\n              action: 'add',\n              type: 'alter',\n              ...id,\n            }\n          },\n      peg$c102 = function(kw, tn) {\n             /* => {\n               action: 'rename';\n               type: 'alter';\n               resource: 'table';\n               keyword?: 'to' | 'as';\n               table: ident;\n               } */\n          return {\n            action: 'rename',\n            type: 'alter',\n            resource: 'table',\n            keyword: kw && kw[0].toLowerCase(),\n            table: tn\n          }\n        },\n      peg$c103 = \"algorithm\",\n      peg$c104 = peg$literalExpectation(\"ALGORITHM\", true),\n      peg$c105 = \"instant\",\n      peg$c106 = peg$literalExpectation(\"INSTANT\", true),\n      peg$c107 = \"inplace\",\n      peg$c108 = peg$literalExpectation(\"INPLACE\", true),\n      peg$c109 = \"copy\",\n      peg$c110 = peg$literalExpectation(\"COPY\", true),\n      peg$c111 = function(s, val) {\n          /* => {\n              type: 'alter';\n              keyword: 'algorithm';\n              resource: 'algorithm';\n              symbol?: '=';\n              algorithm: 'DEFAULT' | 'INSTANT' | 'INPLACE' | 'COPY';\n            }*/\n          return {\n            type: 'alter',\n            keyword: 'algorithm',\n            resource: 'algorithm',\n            symbol: s,\n            algorithm: val\n          }\n        },\n      peg$c112 = \"lock\",\n      peg$c113 = peg$literalExpectation(\"LOCK\", true),\n      peg$c114 = \"shared\",\n      peg$c115 = peg$literalExpectation(\"SHARED\", true),\n      peg$c116 = \"exclusive\",\n      peg$c117 = peg$literalExpectation(\"EXCLUSIVE\", true),\n      peg$c118 = function(s, val) {\n          /* => {\n            type: 'alter';\n            keyword: 'lock';\n            resource: 'lock';\n            symbol?: '=';\n            lock: 'DEFAULT' | 'NONE' | 'SHARED' | 'EXCLUSIVE';\n          }*/\n          return {\n            type: 'alter',\n            keyword: 'lock',\n            resource: 'lock',\n            symbol: s,\n            lock: val\n          }\n        },\n      peg$c119 = function(kc, c, t, de, id) {\n             /* => {\n               index: column;\n               definition: cte_column_definition;\n               keyword: 'index' | 'key';\n               index_type?: index_type;\n               resource: 'index';\n               index_options?: index_options;\n             }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc.toLowerCase(),\n              index_type: t,\n              resource: 'index',\n              index_options: id,\n            }\n          },\n      peg$c120 = function(p, kc, c, de, id) {\n            /* => {\n                index: column;\n                definition: cte_column_definition;\n                keyword: 'fulltext' | 'spatial' | 'fulltext key' | 'spatial key' | 'fulltext index' | 'spatial index';\n                index_options?: index_options;\n                resource: 'index';\n              }*/\n            return {\n              index: c,\n              definition: de,\n              keyword: kc && `${p.toLowerCase()} ${kc.toLowerCase()}` || p.toLowerCase(),\n              index_options: id,\n              resource: 'index',\n            }\n          },\n      peg$c121 = function(kc, c) {\n          // => { keyword: 'constraint'; constraint: ident; }\n          return {\n            keyword: kc.toLowerCase(),\n            constraint: c\n          }\n        },\n      peg$c122 = \"primary key\",\n      peg$c123 = peg$literalExpectation(\"PRIMARY KEY\", true),\n      peg$c124 = function(kc, p, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'primary key';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              resource: 'constraint',\n              index_options: id,\n            }\n        },\n      peg$c125 = function(kc, u, p, i, t, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'unique key' | 'unique' | 'unique index';\n            index_type?: index_type;\n            resource: 'constraint';\n            index_options?: index_options;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p && `${u.toLowerCase()} ${p.toLowerCase()}` || u.toLowerCase(),\n              keyword: kc && kc.keyword,\n              index_type: t,\n              index: i,\n              resource: 'constraint',\n              index_options: id\n            }\n        },\n      peg$c126 = \"foreign key\",\n      peg$c127 = peg$literalExpectation(\"FOREIGN KEY\", true),\n      peg$c128 = function(kc, p, i, de, id) {\n          /* => {\n            constraint?: constraint_name['constraint'];\n            definition: cte_column_definition;\n            constraint_type: 'FOREIGN KEY';\n            keyword: constraint_name['keyword'];\n            index?: column;\n            resource: 'constraint';\n            reference_definition?: reference_definition;\n          }*/\n          return {\n              constraint: kc && kc.constraint,\n              definition: de,\n              constraint_type: p,\n              keyword: kc && kc.keyword,\n              index: i,\n              resource: 'constraint',\n              reference_definition: id\n            }\n        },\n      peg$c129 = \"match full\",\n      peg$c130 = peg$literalExpectation(\"MATCH FULL\", true),\n      peg$c131 = \"match partial\",\n      peg$c132 = peg$literalExpectation(\"MATCH PARTIAL\", true),\n      peg$c133 = \"match simple\",\n      peg$c134 = peg$literalExpectation(\"MATCH SIMPLE\", true),\n      peg$c135 = function(kc, t, de, m, od, ou) {\n          /* => {\n              definition: cte_column_definition;\n              table: table_ref_list;\n              keyword: 'references';\n              match: 'match full' | 'match partial' | 'match simple';\n              on_delete?: on_reference;\n              on_update?: on_reference;\n            }*/\n          return {\n              definition: de,\n              table: t,\n              keyword: kc.toLowerCase(),\n              match:m && m.toLowerCase(),\n              on_delete: od,\n              on_update: ou,\n            }\n        },\n      peg$c136 = \"on delete\",\n      peg$c137 = peg$literalExpectation(\"ON DELETE\", true),\n      peg$c138 = \"on update\",\n      peg$c139 = peg$literalExpectation(\"ON UPDATE\", true),\n      peg$c140 = function(kw, ro) {\n          // => { type: 'on delete' | 'on update'; value: reference_option; }\n          return {\n            type: kw.toLowerCase(),\n            value: ro\n          }\n        },\n      peg$c141 = \"restrict\",\n      peg$c142 = peg$literalExpectation(\"RESTRICT\", true),\n      peg$c143 = \"cascade\",\n      peg$c144 = peg$literalExpectation(\"CASCADE\", true),\n      peg$c145 = \"set null\",\n      peg$c146 = peg$literalExpectation(\"SET NULL\", true),\n      peg$c147 = \"no action\",\n      peg$c148 = peg$literalExpectation(\"NO ACTION\", true),\n      peg$c149 = \"set default\",\n      peg$c150 = peg$literalExpectation(\"SET DEFAULT\", true),\n      peg$c151 = function(kc) {\n          // => 'restrict' | 'cascade' | 'set null' | 'no action' | 'set default'\n          return kc.toLowerCase()\n        },\n      peg$c152 = \"trigger\",\n      peg$c153 = peg$literalExpectation(\"TRIGGER\", true),\n      peg$c154 = \"before\",\n      peg$c155 = peg$literalExpectation(\"BEFORE\", true),\n      peg$c156 = \"after\",\n      peg$c157 = peg$literalExpectation(\"AFTER\", true),\n      peg$c158 = \"instead of\",\n      peg$c159 = peg$literalExpectation(\"INSTEAD OF\", true),\n      peg$c160 = \"on\",\n      peg$c161 = peg$literalExpectation(\"ON\", true),\n      peg$c162 = \"execute\",\n      peg$c163 = peg$literalExpectation(\"EXECUTE\", true),\n      peg$c164 = \"procedure\",\n      peg$c165 = peg$literalExpectation(\"PROCEDURE\", true),\n      peg$c166 = function(kw, kc, t, c, p, te, on, tn, fr, de, fe, tw, fc, fct) {\n          /*\n          => {\n            type: 'create';\n            constraint: string;\n            location: 'before' | 'after' | 'instead of';\n            events: trigger_event_list;\n            table: table_name;\n            from?: table_name;\n            deferrable?: trigger_deferrable;\n            for_each?: trigger_for_row;\n            when?: trigger_when;\n            execute: {\n              keyword: 'execute procedure';\n              expr: proc_func_call;\n            };\n            constraint_type: 'trigger';\n            keyword: 'trigger';\n            constraint_kw: 'constraint';\n            resource: 'constraint';\n          }\n          */\n          return {\n              type: 'create',\n              constraint: c,\n              location: p && p.toLowerCase(),\n              events: te,\n              table: tn,\n              from: fr && fr[2],\n              deferrable: de,\n              for_each: fe,\n              when: tw,\n              execute: {\n                keyword: 'execute procedure',\n                expr: fct\n              },\n              constraint_type: t && t.toLowerCase(),\n              keyword: t && t.toLowerCase(),\n              constraint_kw: kc && kc.toLowerCase(),\n              resource: 'constraint',\n            }\n        },\n      peg$c167 = function(kw) {\n          // => { keyword: 'insert' | 'delete' | 'truncate' }\n          const keyword = Array.isArray(kw) ? kw[0].toLowerCase() : kw.toLowerCase()\n          return {\n            keyword,\n          }\n        },\n      peg$c168 = \"of\",\n      peg$c169 = peg$literalExpectation(\"OF\", true),\n      peg$c170 = function(kw, a) {\n          // => { keyword: 'update'; args?: { keyword: 'of', columns: column_ref_list; }}\n          return {\n            keyword: kw && kw[0] && kw[0].toLowerCase(),\n            args: a && { keyword: a[0], columns: a[2] } || null\n          }\n        },\n      peg$c171 = function(head, tail) {\n          // => trigger_event[];\n          return createList(head, tail)\n        },\n      peg$c172 = \"not\",\n      peg$c173 = peg$literalExpectation(\"NOT\", true),\n      peg$c174 = \"deferrable\",\n      peg$c175 = peg$literalExpectation(\"DEFERRABLE\", true),\n      peg$c176 = \"initially immediate\",\n      peg$c177 = peg$literalExpectation(\"INITIALLY IMMEDIATE\", true),\n      peg$c178 = \"initially deferred\",\n      peg$c179 = peg$literalExpectation(\"INITIALLY DEFERRED\", true),\n      peg$c180 = function(kw, args) {\n          // => { keyword: 'deferrable' | 'not deferrable'; args: 'initially immediate' | 'initially deferred' }\n          return {\n            keyword: kw && kw[0] ? `${kw[0].toLowerCase()} deferrable` : 'deferrable',\n            args: args && args.toLowerCase(),\n          }\n        },\n      peg$c181 = \"for\",\n      peg$c182 = peg$literalExpectation(\"FOR\", true),\n      peg$c183 = \"each\",\n      peg$c184 = peg$literalExpectation(\"EACH\", true),\n      peg$c185 = \"row\",\n      peg$c186 = peg$literalExpectation(\"ROW\", true),\n      peg$c187 = \"statement\",\n      peg$c188 = peg$literalExpectation(\"STATEMENT\", true),\n      peg$c189 = function(kw, e, ob) {\n          // => { keyword: 'for' | 'for each'; args: 'row' | 'statement' }\n          return {\n            keyword: e ? `${kw.toLowerCase()} ${e.toLowerCase()}` : kw.toLowerCase(),\n            args: ob.toLowerCase()\n          }\n        },\n      peg$c190 = function(condition) {\n          // => { type: 'when'; cond: expr; parentheses: true; }\n          return {\n            type: 'when',\n            cond: condition,\n            parentheses: true,\n          }\n        },\n      peg$c191 = function(head, tail) {\n          // => table_option[]\n          return createList(head, tail)\n        },\n      peg$c192 = \"character\",\n      peg$c193 = peg$literalExpectation(\"CHARACTER\", true),\n      peg$c194 = \"set\",\n      peg$c195 = peg$literalExpectation(\"SET\", true),\n      peg$c196 = function() {\n          // => string\n          return 'CHARACTER SET'\n        },\n      peg$c197 = \"charset\",\n      peg$c198 = peg$literalExpectation(\"CHARSET\", true),\n      peg$c199 = \"collate\",\n      peg$c200 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c201 = function(kw, t, s, v) {\n          /* => {\n            keyword: 'character set' | 'charset' | 'collate' | 'default character set' | 'default charset' | 'default collate';\n            symbol: '=';\n            value: ident_name;\n            } */\n          return {\n            keyword: kw && `${kw[0].toLowerCase()} ${t.toLowerCase()}` || t.toLowerCase(),\n            symbol: s,\n            value: v\n          }\n        },\n      peg$c202 = \"avg_row_length\",\n      peg$c203 = peg$literalExpectation(\"AVG_ROW_LENGTH\", true),\n      peg$c204 = \"key_block_size\",\n      peg$c205 = peg$literalExpectation(\"KEY_BLOCK_SIZE\", true),\n      peg$c206 = \"max_rows\",\n      peg$c207 = peg$literalExpectation(\"MAX_ROWS\", true),\n      peg$c208 = \"min_rows\",\n      peg$c209 = peg$literalExpectation(\"MIN_ROWS\", true),\n      peg$c210 = \"stats_sample_pages\",\n      peg$c211 = peg$literalExpectation(\"STATS_SAMPLE_PAGES\", true),\n      peg$c212 = function(kw, s, v) {\n          /* => {\n            keyword: 'auto_increment' | 'avg_row_length' | 'key_block_size' | 'max_rows' | 'min_rows' | 'stats_sample_pages';\n            symbol: '=';\n            value: number; // <== literal_numeric['value']\n            } */\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.value\n          }\n        },\n      peg$c213 = \"connection\",\n      peg$c214 = peg$literalExpectation(\"CONNECTION\", true),\n      peg$c215 = function(kw, s, c) {\n          // => { keyword: 'connection' | 'comment'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: `'${c.value}'`\n          }\n        },\n      peg$c216 = \"compression\",\n      peg$c217 = peg$literalExpectation(\"COMPRESSION\", true),\n      peg$c218 = \"'\",\n      peg$c219 = peg$literalExpectation(\"'\", false),\n      peg$c220 = \"zlib\",\n      peg$c221 = peg$literalExpectation(\"ZLIB\", true),\n      peg$c222 = \"lz4\",\n      peg$c223 = peg$literalExpectation(\"LZ4\", true),\n      peg$c224 = function(kw, s, v) {\n          // => { keyword: 'compression'; symbol: '='; value: \"'ZLIB'\" | \"'LZ4'\" | \"'NONE'\" }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: v.join('').toUpperCase()\n          }\n        },\n      peg$c225 = \"engine\",\n      peg$c226 = peg$literalExpectation(\"ENGINE\", true),\n      peg$c227 = function(kw, s, c) {\n          // => { keyword: 'engine'; symbol: '='; value: string; }\n          return {\n            keyword: kw.toLowerCase(),\n            symbol: s,\n            value: c.toUpperCase()\n          }\n        },\n      peg$c228 = function(fsid) {\n             // => create_fulltext_spatial_index_definition & { action: 'add'; type: 'alter' }\n            return {\n              action: 'add',\n              type: 'alter',\n              ...fsid,\n            }\n          },\n      peg$c229 = function(t) {\n            /*\n            export interface rename_stmt_node {\n              type: 'rename';\n              table: table_to_list;\n            }\n             => AstStatement<rename_stmt_node>\n             */\n            t.forEach(tg => tg.forEach(dt => dt.table && tableList.add(`rename::${dt.db}::${dt.table}`)))\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'rename',\n                table: t\n              }\n            };\n          },\n      peg$c230 = function(kw, a) {\n            /*\n            export interface set_stmt_node {\n              type: 'set';\n              expr: assign_stmt & { keyword?: 'GLOBAL' | 'SESSION' | 'LOCAL' | 'PERSIST' | 'PERSIST_ONLY'; };\n            }\n             => AstStatement<set_stmt_node>\n             */\n          a.keyword = kw\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'set',\n              expr: a\n            }\n          }\n        },\n      peg$c231 = \"in\",\n      peg$c232 = peg$literalExpectation(\"IN\", true),\n      peg$c233 = \"access share\",\n      peg$c234 = peg$literalExpectation(\"ACCESS SHARE\", true),\n      peg$c235 = \"row share\",\n      peg$c236 = peg$literalExpectation(\"ROW SHARE\", true),\n      peg$c237 = \"row exclusive\",\n      peg$c238 = peg$literalExpectation(\"ROW EXCLUSIVE\", true),\n      peg$c239 = \"share update exclusive\",\n      peg$c240 = peg$literalExpectation(\"SHARE UPDATE EXCLUSIVE\", true),\n      peg$c241 = \"share row exclusive\",\n      peg$c242 = peg$literalExpectation(\"SHARE ROW EXCLUSIVE\", true),\n      peg$c243 = \"access exclusive\",\n      peg$c244 = peg$literalExpectation(\"ACCESS EXCLUSIVE\", true),\n      peg$c245 = \"share\",\n      peg$c246 = peg$literalExpectation(\"SHARE\", true),\n      peg$c247 = \"mode\",\n      peg$c248 = peg$literalExpectation(\"MODE\", true),\n      peg$c249 = function(m) {\n          // => { mode: string; }\n          return {\n            mode: `in ${m.toLowerCase()} mode`\n          }\n        },\n      peg$c250 = \"nowait\",\n      peg$c251 = peg$literalExpectation(\"NOWAIT\", true),\n      peg$c252 = function(k, t, lm, nw) {\n\n            /*\n            export interface lock_stmt_node {\n              type: 'lock';\n              keyword: 'lock';\n              tables: [[table_base], ...{table: table_ref}[]]; // see table_ref_list\n              lock_mode?: lock_mode;\n              nowait?: 'NOWAIT';\n            }\n             => AstStatement<lock_stmt_node>\n             */\n\n          if (t) t.forEach(tt => tableList.add(`lock::${tt.db}::${tt.table}`))\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'lock',\n              keyword: k && k.toLowerCase(),\n              tables: t.map((table) => ({ table })),\n              lock_mode: lm,\n              nowait: nw\n            }\n          }\n        },\n      peg$c253 = function(e) {\n          /*\n          export interface call_stmt_node {\n            type: 'call';\n            expr: proc_func_call;\n          }\n          => AstStatement<call_stmt_node>\n          */\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'call',\n              expr: e\n            }\n          }\n        },\n      peg$c254 = \"tables\",\n      peg$c255 = peg$literalExpectation(\"TABLES\", true),\n      peg$c256 = function() {\n          return {\n            /*\n              export interface show_stmt_node {\n                type: 'show';\n                keyword: 'tables';\n              }\n              => AstStatement<show_stmt_node>\n             */\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'show',\n              keyword: 'tables'\n            }\n          }\n        },\n      peg$c257 = \"(\",\n      peg$c258 = peg$literalExpectation(\"(\", false),\n      peg$c259 = \")\",\n      peg$c260 = peg$literalExpectation(\")\", false),\n      peg$c261 = function(s) {\n          /*\n          export interface select_stmt_node extends select_stmt_nake  {\n             parentheses_symbol: true;\n            }\n            => select_stmt_node\n            */\n            return {\n              ...s[2],\n              parentheses_symbol: true,\n            }\n          },\n      peg$c262 = function(head, tail) {\n            // => cte_definition[]\n            return createList(head, tail);\n          },\n      peg$c263 = function(cte) {\n            // => [cte_definition & {recursive: true; }]\n            cte.recursive = true;\n            return [cte]\n          },\n      peg$c264 = function(name, columns, stmt) {\n          // => { name: { type: 'default'; value: string; }; stmt: union_stmt; columns?: cte_column_definition; }\n          if (typeof name === 'string') name = { type: 'default', value: name }\n            return { name, stmt, columns };\n          },\n      peg$c265 = function(head, tail) {\n          // => column[]\n            return createList(head, tail);\n          },\n      peg$c266 = function(d, o, c) {\n          // => {type: string; columns: column_ref_list;}\n          console.lo\n          return {\n            type: `${d} ON`,\n            columns: c\n          }\n        },\n      peg$c267 = function(d) {\n          // => { type: string | undefined; }\n          return {\n            type: d,\n          }\n        },\n      peg$c268 = function(cte, opts, d, c, f, w, g, h, o, l, win) {\n            /* => {\n                with?: with_clause;\n                type: 'select';\n                options?: option_clause;\n                distinct?: {type: string; columns?: column_list; };\n                columns: column_clause;\n                from?: from_clause;\n                where?: where_clause;\n                groupby?: group_by_clause;\n                having?: having_clause;\n                orderby?: order_by_clause;\n                limit?: limit_clause;\n                window?: window_clause;\n              }*/\n            if(f) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                with: cte,\n                type: 'select',\n                options: opts,\n                distinct: d,\n                columns: c,\n                from: f,\n                where: w,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window: win,\n            };\n        },\n      peg$c269 = function(head, tail) {\n          // => query_option[]\n          const opts = [head];\n          for (let i = 0, l = tail.length; i < l; ++i) {\n            opts.push(tail[i][1]);\n          }\n          return opts;\n        },\n      peg$c270 = function(option) {\n            // =>  'SQL_CALC_FOUND_ROWS'| 'SQL_CACHE'| 'SQL_NO_CACHE'| 'SQL_BIG_RESULT'| 'SQL_SMALL_RESULT'| 'SQL_BUFFER_RESULT'\n            return option;\n          },\n      peg$c271 = function(head, tail) {\n            // => 'ALL' | '*' | column_list_item[]\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c272 = function(head, tail) {\n          // => column_list_item[]\n            return createList(head, tail);\n          },\n      peg$c273 = function(n) {\n          // => { brackets: boolean, number: number }\n          return {\n            brackets: true,\n            number: n\n          }\n        },\n      peg$c274 = function(e, a) {\n          // => expr & { array_index: array_index }\n          if (a) e.array_index = a\n          return e\n        },\n      peg$c275 = function(c) {\n          // => { expr: expr; as: null; }\n          return { expr: c, as: null }\n        },\n      peg$c276 = function(e, s, t, tail, alias) {\n          // => { type: 'cast'; expr: expr; symbol: '::'; target: data_type;  as?: null; }\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t,\n            tail: tail && tail[0] && { operator: tail[0][1], expr: tail[0][3] },\n          }\n        },\n      peg$c277 = function(tbl) {\n          // => { type: 'star_ref'; expr: column_ref; as: null; }\n            columnList.add(`select::${tbl}::(.*)`);\n            return {\n              type: 'star_ref',\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c278 = function(e, alias) {\n          // => { type: 'expr'; expr: expr; as?: alias_clause; }\n            return { type: 'expr', expr: e, as: alias };\n          },\n      peg$c279 = function(i) { /*=>alias_ident*/ return i; },\n      peg$c280 = function(i) { /*=>ident*/ return i; },\n      peg$c281 = function(l) { /*=>table_ref_list*/return l; },\n      peg$c282 = function(head, tail) {\n          // => table_to_item[]\n            return createList(head, tail);\n          },\n      peg$c283 = function(head, tail) {\n          // => table_name[]\n            return [head, tail]\n          },\n      peg$c284 = \"btree\",\n      peg$c285 = peg$literalExpectation(\"BTREE\", true),\n      peg$c286 = \"hash\",\n      peg$c287 = peg$literalExpectation(\"HASH\", true),\n      peg$c288 = \"gist\",\n      peg$c289 = peg$literalExpectation(\"GIST\", true),\n      peg$c290 = \"gin\",\n      peg$c291 = peg$literalExpectation(\"GIN\", true),\n      peg$c292 = function(t) {\n          // => { keyword: 'using'; type: 'btree' | 'hash' | 'gist' | 'gin' }\n          return {\n            keyword: 'using',\n            type: t.toLowerCase(),\n          }\n        },\n      peg$c293 = function(head, tail) {\n          // => index_option[]\n          return createList(head, tail)\n        },\n      peg$c294 = function(head, tail) {\n          // => index_option[]\n          const result = [head];\n          for (let i = 0; i < tail.length; i++) {\n            result.push(tail[i][1]);\n          }\n          return result;\n        },\n      peg$c295 = function(k, e, kbs) {\n          // => { type: 'key_block_size'; symbol: '='; expr: number; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: kbs\n          }\n        },\n      peg$c296 = function(k, e, kbs) {\n          // => { type: ident_name; symbol: '='; expr: number | {type: 'origin'; value: ident; }; }\n          return {\n            type: k.toLowerCase(),\n            symbol: e,\n            expr: typeof kbs === 'string' && { type: 'origin', value: kbs } || kbs\n          };\n        },\n      peg$c297 = \"with\",\n      peg$c298 = peg$literalExpectation(\"WITH\", true),\n      peg$c299 = \"parser\",\n      peg$c300 = peg$literalExpectation(\"PARSER\", true),\n      peg$c301 = function(pn) {\n          // => { type: 'with parser'; expr: ident_name }\n          return {\n            type: 'with parser',\n            expr: pn\n          }\n        },\n      peg$c302 = \"visible\",\n      peg$c303 = peg$literalExpectation(\"VISIBLE\", true),\n      peg$c304 = \"invisible\",\n      peg$c305 = peg$literalExpectation(\"INVISIBLE\", true),\n      peg$c306 = function(k) {\n          // => { type: 'visible'; expr: 'visible' } | { type: 'invisible'; expr: 'invisible' }\n          return {\n            type: k.toLowerCase(),\n            expr: k.toLowerCase()\n          }\n        },\n      peg$c307 = function(head, tail) {\n            // => [table_base, ...table_ref[]]\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c308 = function(t) { /* => table_base */ return t; },\n      peg$c309 = function(t) { /* => table_join */ return t; },\n      peg$c310 = function(op, t, head, tail) {\n            // => table_base & {join: join_op; using: ident_name[]; }\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c311 = function(op, t, expr) {\n          // => table_base & {join: join_op; on?: on_clause; }\n            t.join = op;\n            t.on = expr;\n            return t;\n          },\n      peg$c312 = function(op, stmt, alias, expr) {\n          /* => {\n            expr: union_stmt & { parentheses: true; };\n            as?: alias_clause;\n            join: join_op;\n            on?: on_clause;\n          }*/\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c313 = function() {\n          // => { type: 'dual' }\n            return {\n              type: 'dual'\n            };\n        },\n      peg$c314 = function(stmt, alias) {\n          // => { expr: value_clause; as?: alias_clause; }\n          return {\n            expr: { type: 'values', values: stmt },\n            as: alias\n          };\n        },\n      peg$c315 = function(stmt, alias) {\n          // => { expr: union_stmt | value_clause; as?: alias_clause; }\n          if (Array.isArray(stmt)) stmt = { type: 'values', values: stmt }\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias\n          };\n        },\n      peg$c316 = \"tablesample\",\n      peg$c317 = peg$literalExpectation(\"TABLESAMPLE\", true),\n      peg$c318 = \"repeatable\",\n      peg$c319 = peg$literalExpectation(\"REPEATABLE\", true),\n      peg$c320 = function(t, f, re, alias) {\n          // => table_name & { expr: expr, repeatable: literal_numeric; as?: alias_clause;}\n          return {\n            ...t,\n            as: alias,\n            tablesample: {\n              expr: f,\n              repeatable: re && re[4],\n            }\n          }\n        },\n      peg$c321 = function(t, alias) {\n          // => table_name & { as?: alias_clause; }\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                ...t,\n                as: alias\n              };\n            }\n          },\n      peg$c322 = function() { /* => 'LEFT JOIN' */ return 'LEFT JOIN'; },\n      peg$c323 = function() { /* =>  'RIGHT JOIN' */ return 'RIGHT JOIN'; },\n      peg$c324 = function() { /* => 'FULL JOIN' */ return 'FULL JOIN'; },\n      peg$c325 = function() { /* => 'INNER JOIN' */ return 'INNER JOIN'; },\n      peg$c326 = function(dt, schema, tail) {\n            // => { db?: ident; schema?: ident, table: ident | '*'; }\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.schema = schema[3];\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c327 = function(dt) {\n          // => IGNORE\n            tableList.add(`select::${dt}::(.*)`);\n            return {\n              db: dt,\n              table: '*'\n            }\n          },\n      peg$c328 = function(dt, tail) {\n          // => IGNORE\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c329 = function(v) {\n          // => IGNORE\n            v.db = null;\n            v.table = v.name;\n            return v;\n          },\n      peg$c330 = function(e) { /* => or_and_where_expr */ return e; },\n      peg$c331 = function(e) { /* => binary_expr */ return e; },\n      peg$c332 = function(e) { /* => expr_list['value'] */ return e.value; },\n      peg$c333 = function(head, tail) {\n          // => column_ref[]\n            return createList(head, tail);\n          },\n      peg$c334 = function(e) { /* => expr */ return e; },\n      peg$c335 = function(l) {\n          // => { keyword: 'window'; type: 'window', expr: named_window_expr_list; }\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c336 = function(head, tail) {\n          // => named_window_expr[]\n            return createList(head, tail);\n          },\n      peg$c337 = function(nw, anw) {\n          // => { name: ident_name;  as_window_specification: as_window_specification; }\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c338 = function(ws) {\n          // => { window_specification: window_specification; parentheses: boolean }\n          return {\n            window_specification: ws || {},\n            parentheses: true\n          }\n        },\n      peg$c339 = function(bc, l, w) {\n          // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: string | null; }\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c340 = function(bc, l) {\n          // => { name: null; partitionby: partition_by_clause; orderby: order_by_clause; window_frame_clause: null }\n          return {\n            name: null,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: null\n          }\n        },\n      peg$c341 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c342 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c343 = \"following\",\n      peg$c344 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c345 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c346 = \"preceding\",\n      peg$c347 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c348 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c349 = \"current\",\n      peg$c350 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c351 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c352 = \"unbounded\",\n      peg$c353 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c354 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c355 = function(bc) { /* => column_clause */ return bc; },\n      peg$c356 = function(l) { /* => order_by_list */ return l; },\n      peg$c357 = function(head, tail) {\n          // => order_by_element[]\n            return createList(head, tail);\n          },\n      peg$c358 = function(e, d) {\n          // => { expr: expr; type: 'ASC' | 'DESC'; }\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c359 = function(i1, tail) {\n          // => { separator: 'offset' | ''; value: [number_or_param | { type: 'origin', value: 'all' }, number_or_param?] }\n            const res = []\n            if (typeof i1 === 'string') res.push({ type: 'origin', value: 'all' })\n            else res.push(i1)\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c360 = function(t, l, w, r) {\n            /* export interface update_stmt_node {\n               type: 'update';\n               table: table_ref_list;\n               set: set_list;\n               where?: where_clause;\n               returning?: returning_stmt;\n            }\n           => AstStatement<update_stmt_node>\n           */\n            if (t) t.forEach(tableInfo => {\n              const { db, as, table } = tableInfo\n              tableList.add(`update::${db}::${table}`)\n            });\n            if(l) {\n              l.forEach(col => columnList.add(`update::${col.table}::${col.column}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'update',\n                table: t,\n                set: l,\n                where: w,\n                returning: r,\n              }\n            };\n          },\n      peg$c361 = function(t, f, w) {\n            /*\n            export interface table_ref_addition extends table_name {\n              addition: true;\n              as?: alias_clause;\n            }\n             export interface delete_stmt_node {\n               type: 'delete';\n               table?: table_ref_list | [table_ref_addition];\n               where?: where_clause;\n            }\n           => AstStatement<delete_stmt_node>\n           */\n            if(f) f.forEach(info => {\n              info.table && tableList.add(`delete::${info.db}::${info.table}`);\n              columnList.add(`delete::${info.table}::(.*)`);\n            });\n            if (t === null && f.length === 1) {\n              const tableInfo = f[0]\n              t = [{\n                db: tableInfo.db,\n                table: tableInfo.table,\n                as: tableInfo.as,\n                addition: true\n              }]\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: 'delete',\n                table: t,\n                from: f,\n                where: w\n              }\n            };\n          },\n      peg$c362 = function(head, tail) {\n            // => set_item[]\n            return createList(head, tail);\n          },\n      peg$c363 = \"=\",\n      peg$c364 = peg$literalExpectation(\"=\", false),\n      peg$c365 = function(tbl, c, v) {\n            // => { column: ident; value: additive_expr; table?: ident;}\n            return { column: c, value: v, table: tbl && tbl[0] };\n          },\n      peg$c366 = function(tbl, c, v) {\n            // => { column: ident; value: column_ref; table?: ident; keyword: 'values' }\n            return { column: c, value: v, table: tbl && tbl[0], keyword: 'values' };\n        },\n      peg$c367 = function(k, c) {\n          // => { type: 'returning'; columns: column_ref_list | column_ref; }\n          return {\n            type: k && k.toLowerCase() || 'returning',\n            columns: c === '*' && [{ type: 'columne_ref', table: null, column: '*' }] || c\n          }\n        },\n      peg$c368 = function(head, tail) {\n          // => ident_name[]\n            return createList(head, tail)\n          },\n      peg$c369 = function(v) {\n          // => value_item\n          return v\n        },\n      peg$c370 = function(ri, t, p, c, v, r) {\n            /*\n             export interface replace_insert_stmt_node {\n               type: 'insert' | 'replace';\n               table?: [table_name];\n               columns: column_list;\n               values: insert_value_clause;\n               partition?: insert_partition;\n               returning?: returning_stmt;\n            }\n           => AstStatement<replace_insert_stmt_node>\n           */\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              t.as = null\n            }\n            if (c) {\n              let table = t && t.table || null\n              if(Array.isArray(v)) {\n                v.forEach((row, idx) => {\n                  if(row.value.length != c.length) {\n                    throw new Error(`Error: column count doesn't match value count at row ${idx+1}`)\n                  }\n                })\n              }\n              c.forEach(c => columnList.add(`insert::${table}::${c}`));\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: c,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c371 = function(ri, t, p, v, r) {\n           // => AstStatement<replace_insert_stmt_node>\n            if (t) {\n              tableList.add(`insert::${t.db}::${t.table}`)\n              columnList.add(`insert::${t.table}::(.*)`);\n              t.as = null\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: {\n                type: ri,\n                table: [t],\n                columns: null,\n                values: v,\n                partition: p,\n                returning: r,\n              }\n            };\n          },\n      peg$c372 = function() { /* => 'insert' */ return 'insert'; },\n      peg$c373 = function() { /* => 'replace' */return 'replace'; },\n      peg$c374 = function(l) { /* => value_list */ return l; },\n      peg$c375 = function(head, tail) {\n          // => value_item[]\n            return createList(head, tail);\n          },\n      peg$c376 = function(l) {\n          // => expr_list\n            return l;\n          },\n      peg$c377 = function(head, tail) {\n          // => { type: 'expr_list'; value: expr_item[] }\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c378 = function(e, u) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c379 = function(e) {\n            // => { type: 'interval', expr: expr; unit: interval_unit; }\n            return {\n              type: 'interval',\n              expr: e,\n              unit: '',\n            }\n          },\n      peg$c380 = function(condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr:  null;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c381 = function(expr, condition_list, otherwise) {\n            /* => {\n                type: 'case';\n                expr: expr;\n                // nb: Only the last element is a case_else\n                args: (case_when_then | case_else)[];\n              } */\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c382 = function(condition, result) {\n          // => { type: 'when'; cond: binary_expr; result: expr; }\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c383 = function(result) {\n          // => { type: 'else'; condition?: never; result: expr; }\n          return { type: 'else', result: result };\n        },\n      peg$c384 = function(head, tail) {\n          /*\n          export type BINARY_OPERATORS = LOGIC_OPERATOR | 'OR' | 'AND' | multiplicative_operator | additive_operator\n            | arithmetic_comparison_operator\n            | 'IN' | 'NOT IN'\n            | 'BETWEEN' | 'NOT BETWEEN'\n            | 'IS' | 'IS NOT'\n            | 'LIKE'\n            | '@>' | '<@' | OPERATOR_CONCATENATION | DOUBLE_WELL_ARROW | WELL_ARROW | '?' | '?|' | '?&' | '#-'\n          export interface binary_expr {\n            type: 'binary_expr',\n            operator: BINARY_OPERATORS,\n            left: expr,\n            right: expr\n          }\n          => binary_expr\n          */\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c385 = function(op, tail) {\n          /*\n          export type UNARY_OPERATORS = '+' | '-' | 'EXISTS' | 'NOT EXISTS'  | 'NULL'\n          => {\n            type: 'unary_expr',\n            operator: UNARY_OPERATORS,\n            expr: expr;\n            parentheses?: boolean;\n          } */\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c386 = function(head, tail) {\n          // => binary_expr | { type: 'expr_list'; value: expr[] }\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c387 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c388 = \"!\",\n      peg$c389 = peg$literalExpectation(\"!\", false),\n      peg$c390 = function(expr) {\n          // => unary_expr\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c391 = function(left, rh) {\n          // => binary_expr\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c392 = function(op, stmt) {\n          // => unary_expr\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c393 = function(nk) { /* => 'NOT EXISTS' */ return nk[0] + ' ' + nk[2]; },\n      peg$c394 = function(l) {\n          // => { type: 'arithmetic'; tail: any }\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c395 = \">=\",\n      peg$c396 = peg$literalExpectation(\">=\", false),\n      peg$c397 = \">\",\n      peg$c398 = peg$literalExpectation(\">\", false),\n      peg$c399 = \"<=\",\n      peg$c400 = peg$literalExpectation(\"<=\", false),\n      peg$c401 = \"<>\",\n      peg$c402 = peg$literalExpectation(\"<>\", false),\n      peg$c403 = \"<\",\n      peg$c404 = peg$literalExpectation(\"<\", false),\n      peg$c405 = \"!=\",\n      peg$c406 = peg$literalExpectation(\"!=\", false),\n      peg$c407 = function(right) {\n          // => { op: 'IS'; right: additive_expr; }\n            return { op: 'IS', right: right };\n          },\n      peg$c408 = function(right) {\n          // => { type: 'origin'; value: string; }\n          const { db, table } = right.pop()\n          const tableName = table === '*' ? '*' : `\"${table}\"`\n          let tableStr = db ? `\"${db}\".${tableName}` : tableName\n          return { op: 'IS', right: {\n            type: 'default',\n            value: `DISTINCT FROM ${tableStr}`\n          }}\n        },\n      peg$c409 = function(right) {\n            // => { type: 'IS NOT'; right: additive_expr; }\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c410 = function(op, begin, end) {\n          // => { op: 'BETWEEN' | 'NOT BETWEEN'; right: { type: 'expr_list'; value: [expr, expr] }  }\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c411 = function(nk) { /* => 'NOT BETWEEN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c412 = function(nk) { /* => 'LIKE' */ return nk[0] + ' ' + nk[2]; },\n      peg$c413 = \"similar\",\n      peg$c414 = peg$literalExpectation(\"SIMILAR\", true),\n      peg$c415 = function() {\n          // => 'SIMILAR TO'\n          return 'SIMILAR TO'\n        },\n      peg$c416 = function(nk) { /* => 'NOT IN' */ return nk[0] + ' ' + nk[2]; },\n      peg$c417 = function(op, right) {\n           // => { op: like_op; right: literal | comparison_expr}\n            return { op: op, right: right };\n          },\n      peg$c418 = function(op, l) {\n          // => {op: in_op; right: expr_list | var_decl | literal_string; }\n            return { op: op, right: l };\n          },\n      peg$c419 = function(op, e) {\n          // => IGNORE\n            return { op: op, right: e };\n          },\n      peg$c420 = \"@>\",\n      peg$c421 = peg$literalExpectation(\"@>\", false),\n      peg$c422 = \"<@\",\n      peg$c423 = peg$literalExpectation(\"<@\", false),\n      peg$c424 = \"?\",\n      peg$c425 = peg$literalExpectation(\"?\", false),\n      peg$c426 = \"?|\",\n      peg$c427 = peg$literalExpectation(\"?|\", false),\n      peg$c428 = \"?&\",\n      peg$c429 = peg$literalExpectation(\"?&\", false),\n      peg$c430 = \"#-\",\n      peg$c431 = peg$literalExpectation(\"#-\", false),\n      peg$c432 = function(s, c) {\n          // => { op: string; right: expr }\n          return {\n            op: s,\n            right: c && c.expr || c\n          }\n        },\n      peg$c433 = \"+\",\n      peg$c434 = peg$literalExpectation(\"+\", false),\n      peg$c435 = \"-\",\n      peg$c436 = peg$literalExpectation(\"-\", false),\n      peg$c437 = function(head, tail) {\n            // => binary_expr\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c438 = \"*\",\n      peg$c439 = peg$literalExpectation(\"*\", false),\n      peg$c440 = \"/\",\n      peg$c441 = peg$literalExpectation(\"/\", false),\n      peg$c442 = \"%\",\n      peg$c443 = peg$literalExpectation(\"%\", false),\n      peg$c444 = function(c, a) {\n          // => column_ref\n          c.array_index = a\n          return c\n        },\n      peg$c445 = function(list) {\n          // => or_and_where_expr\n              list.parentheses = true;\n              return list;\n          },\n      peg$c446 = \"$\",\n      peg$c447 = peg$literalExpectation(\"$\", false),\n      peg$c448 = function(p, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$<${n.value}>`,\n          }\n        },\n      peg$c449 = function(p, n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `$${n.value}`,\n          }\n        },\n      peg$c450 = \"e\",\n      peg$c451 = peg$literalExpectation(\"E\", true),\n      peg$c452 = function(n) {\n          // => { type: 'origin'; value: string; }\n          return {\n            type: 'origin',\n            value: `E'${n.join('')}'`\n          }\n        },\n      peg$c453 = function(tbl) {\n          // => IGNORE\n            columnList.add(`select::${tbl}::(.*)`);\n            return {\n                type: 'column_ref',\n                table: tbl,\n                column: '*'\n            }\n          },\n      peg$c454 = function(tbl, col, a, j) {\n          // => IGNORE\n            const tableName = tbl && tbl[0] || null\n            columnList.add(`select::${tableName}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tableName,\n              column: col,\n              arrow: a,\n              property: j\n            };\n        },\n      peg$c455 = function(schema, tbl, col) {\n          /* => {\n              type: 'column_ref';\n              schema: string;\n              table: string;\n              column: column | '*';\n              arrow?: '->>' | '->';\n              property?: literal_string | literal_numeric;\n            } */\n            columnList.add(`select::${schema}.${tbl[3]}::${col[3]}`);\n            return {\n              type: 'column_ref',\n              schema: schema,\n              table: tbl[3],\n              column: col[3]\n            };\n          },\n      peg$c456 = function(tbl, col) {\n            /* => {\n              type: 'column_ref';\n              table: ident;\n              column: column | '*';\n              arrow?: '->>' | '->';\n              property?: literal_string | literal_numeric;\n            } */\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c457 = function(col) {\n          // => IGNORE\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c458 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c459 = function(name) {\n            // => ident_name\n            return name;\n          },\n      peg$c460 = function(name) {\n            // => indent_name\n            return name;\n          },\n      peg$c461 = function(name) { if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\"); return false },\n      peg$c462 = function(name, c) {\n          // => string\n          return `${name}(${c.join(', ')})`\n        },\n      peg$c463 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c464 = function(name) {\n            // => string\n            return name;\n          },\n      peg$c465 = function(name) {\n            // => IGNORE\n            return name;\n          },\n      peg$c466 = \"\\\"\",\n      peg$c467 = peg$literalExpectation(\"\\\"\", false),\n      peg$c468 = /^[^\"]/,\n      peg$c469 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c470 = function(chars) { /* => string */ return chars.join(''); },\n      peg$c471 = /^[^']/,\n      peg$c472 = peg$classExpectation([\"'\"], true, false),\n      peg$c473 = \"`\",\n      peg$c474 = peg$literalExpectation(\"`\", false),\n      peg$c475 = /^[^`]/,\n      peg$c476 = peg$classExpectation([\"`\"], true, false),\n      peg$c477 = function(name) { /* => string */ return name; },\n      peg$c478 = function(start, parts) { /* => string */ return start + parts.join(''); },\n      peg$c479 = function(start, parts) {\n            // => string\n            return start + parts.join('');\n          },\n      peg$c480 = /^[A-Za-z_]/,\n      peg$c481 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c482 = /^[A-Za-z0-9_\\-]/,\n      peg$c483 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c484 = /^[A-Za-z0-9_]/,\n      peg$c485 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\"], false, false),\n      peg$c486 = \":\",\n      peg$c487 = peg$literalExpectation(\":\", false),\n      peg$c488 = function(l) {\n          // => { type: 'param'; value: ident_name }\n            return { type: 'param', value: l[1] };\n          },\n      peg$c489 = function(kw, l) {\n          // => { type: 'on update'; keyword: string; parentheses: boolean; expr: expr }\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c490 = function(kw) {\n          // => { type: 'on update'; keyword: string; }\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c491 = \"over\",\n      peg$c492 = peg$literalExpectation(\"OVER\", true),\n      peg$c493 = function(aws) {\n          // => { type: 'windows'; as_window_specification: as_window_specification }\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c494 = function(bc, l) {\n          // => { partitionby: partition_by_clause; orderby: order_by_clause }\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c495 = function(name, over) {\n          // => { type: 'window_func'; name: string; over: over_partition }\n          return {\n            type: 'window_func',\n            name: name,\n            over: over\n          }\n        },\n      peg$c496 = function(name, l, cn, over) {\n          // => { type: 'window_func'; name: string; args: expr_list; consider_nulls: null | string; over: over_partition }\n          return {\n            type: 'window_func',\n            name: name,\n            args: l,\n            over: over,\n            consider_nulls: cn\n          };\n        },\n      peg$c497 = function(name, l, cn, over) {\n          // => window_fun_laglead\n          return {\n            type: 'window_func',\n            name: name,\n            args: {\n              type: 'expr_list', value: [l]\n            },\n            over: over,\n            consider_nulls: cn\n          };\n        },\n      peg$c498 = \"first_value\",\n      peg$c499 = peg$literalExpectation(\"FIRST_VALUE\", true),\n      peg$c500 = \"last_value\",\n      peg$c501 = peg$literalExpectation(\"LAST_VALUE\", true),\n      peg$c502 = \"row_number\",\n      peg$c503 = peg$literalExpectation(\"ROW_NUMBER\", true),\n      peg$c504 = \"dense_rank\",\n      peg$c505 = peg$literalExpectation(\"DENSE_RANK\", true),\n      peg$c506 = \"rank\",\n      peg$c507 = peg$literalExpectation(\"RANK\", true),\n      peg$c508 = \"lag\",\n      peg$c509 = peg$literalExpectation(\"LAG\", true),\n      peg$c510 = \"lead\",\n      peg$c511 = peg$literalExpectation(\"LEAD\", true),\n      peg$c512 = \"nth_value\",\n      peg$c513 = peg$literalExpectation(\"NTH_VALUE\", true),\n      peg$c514 = \"ignore\",\n      peg$c515 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c516 = \"respect\",\n      peg$c517 = peg$literalExpectation(\"RESPECT\", true),\n      peg$c518 = function(v) {\n          // => string\n          return v.toUpperCase() + ' NULLS'\n        },\n      peg$c519 = function(name, e, bc) {\n          // => { type: 'aggr_func'; name: 'SUM' | 'MAX' | 'MIN' | 'AVG'; args: { expr: additive_expr }; over: over_partition }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc\n            };\n          },\n      peg$c520 = function(name, arg, bc) {\n          // => { type: 'aggr_func'; name: 'COUNT' | 'GROUP_CONCAT'; args:count_arg; over: over_partition }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c521 = \"percentile_cont\",\n      peg$c522 = peg$literalExpectation(\"percentile_cont\", true),\n      peg$c523 = \"percentile_disc\",\n      peg$c524 = peg$literalExpectation(\"percentile_disc\", true),\n      peg$c525 = \"within\",\n      peg$c526 = peg$literalExpectation(\"within\", true),\n      peg$c527 = function(name, arg, or, bc) {\n         // => { type: 'aggr_func'; name: 'PERCENTILE_CONT' | 'PERCENTILE_DISC'; args: literal_numeric / literal_array; within_group_orderby: order_by_clause; over?: over_partition }\n          return {\n              type: 'aggr_func',\n              name: name.toUpperCase(),\n              args: {\n                expr: arg\n              },\n              within_group_orderby: or,\n              over: bc\n            };\n        },\n      peg$c528 = peg$literalExpectation(\"mode\", true),\n      peg$c529 = function(name, or, bc) {\n          // => { type: 'aggr_func'; name: 'MODE'; args: literal_numeric / literal_array; within_group_orderby: order_by_clause; over?: over_partition }\n          return {\n              type: 'aggr_func',\n              name: name.toUpperCase(),\n              args: { expr: {} },\n              within_group_orderby: or,\n              over: bc\n            };\n        },\n      peg$c530 = function(d, c) { /* => { distinct: 'DISTINCT'; expr: column_ref; } */  return { distinct: d, expr: c }; },\n      peg$c531 = function(d, c, or) {  /* => { distinct: 'DISTINCT'; expr: expr; orderby?: order_by_clause; } */  c.parentheses = true; return { distinct: d, expr: c, orderby: or }; },\n      peg$c532 = function(e) { /* => { expr: star_expr } */ return { expr: e }; },\n      peg$c533 = function(name, arg, o) {\n          // => { type: 'aggr_func'; args:count_arg; name: 'ARRAY_AGG'; orderby?: order_by_clause  }\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              orderby: o,\n            };\n          },\n      peg$c534 = function() { /* => { type: 'star'; value: '*' } */ return { type: 'star', value: '*' }; },\n      peg$c535 = \"both\",\n      peg$c536 = peg$literalExpectation(\"BOTH\", true),\n      peg$c537 = \"leading\",\n      peg$c538 = peg$literalExpectation(\"LEADING\", true),\n      peg$c539 = \"trailing\",\n      peg$c540 = peg$literalExpectation(\"TRAILING\", true),\n      peg$c541 = function(p, rm, k) {\n          // => expr_list\n          let value = []\n          if (p) value.push({type: 'origin', value: p })\n          if (rm) value.push(rm)\n          value.push({type: 'origin', value: 'from' })\n          return {\n            type: 'expr_list',\n            value,\n          }\n        },\n      peg$c542 = \"trim\",\n      peg$c543 = peg$literalExpectation(\"trim\", true),\n      peg$c544 = function(tr, s) {\n          // => { type: 'function'; name: string; args: expr_list; }\n          let args = tr || { type: 'expr_list', value: [] }\n          args.value.push(s)\n          return {\n              type: 'function',\n              name: 'TRIM',\n              args,\n          };\n        },\n      peg$c545 = function(name, l) {\n            // => { type: 'function'; name: string; args: expr_list; }\n            if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] }\n            };\n          },\n      peg$c546 = function(name, l, bc) {\n          // => { type: 'function'; name: string; args: expr_list; over?: over_partition; }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c547 = function(f, up) {\n          // => { type: 'function'; name: string; over?: on_update_current_timestamp; }\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c548 = \"century\",\n      peg$c549 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c550 = \"day\",\n      peg$c551 = peg$literalExpectation(\"DAY\", true),\n      peg$c552 = \"decade\",\n      peg$c553 = peg$literalExpectation(\"DECADE\", true),\n      peg$c554 = \"dow\",\n      peg$c555 = peg$literalExpectation(\"DOW\", true),\n      peg$c556 = \"doy\",\n      peg$c557 = peg$literalExpectation(\"DOY\", true),\n      peg$c558 = \"epoch\",\n      peg$c559 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c560 = \"hour\",\n      peg$c561 = peg$literalExpectation(\"HOUR\", true),\n      peg$c562 = \"isodow\",\n      peg$c563 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c564 = \"isoyear\",\n      peg$c565 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c566 = \"microseconds\",\n      peg$c567 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c568 = \"millennium\",\n      peg$c569 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c570 = \"milliseconds\",\n      peg$c571 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c572 = \"minute\",\n      peg$c573 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c574 = \"month\",\n      peg$c575 = peg$literalExpectation(\"MONTH\", true),\n      peg$c576 = \"quarter\",\n      peg$c577 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c578 = \"second\",\n      peg$c579 = peg$literalExpectation(\"SECOND\", true),\n      peg$c580 = \"timezone\",\n      peg$c581 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c582 = \"timezone_hour\",\n      peg$c583 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c584 = \"timezone_minute\",\n      peg$c585 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c586 = \"week\",\n      peg$c587 = peg$literalExpectation(\"WEEK\", true),\n      peg$c588 = \"year\",\n      peg$c589 = peg$literalExpectation(\"YEAR\", true),\n      peg$c590 = function() {\n          // => 'string'\n          return f\n        },\n      peg$c591 = function(kw, f, t, s) {\n          // => { type: 'extract'; args: { field: extract_filed; cast_type: 'TIMESTAMP' | 'INTERVAL' | 'TIME'; source: expr; }}\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c592 = function(e, s, t, alias) {\n          /* => {\n              as?: alias_clause,\n              type: 'cast';\n              expr: literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          e.parentheses = true\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t,\n          }\n        },\n      peg$c593 = function(e, s, t, alias) {\n          /* => {\n              as?: alias_clause,\n              type: 'cast';\n              expr: literal | aggr_func | func_call | case_expr | interval_expr | column_ref | param\n                | expr;\n              symbol: '::' | 'as',\n              target: data_type;\n            }\n            */\n          return {\n            as: alias,\n            type: 'cast',\n            expr: e,\n            symbol: '::',\n            target: t\n          }\n        },\n      peg$c594 = function(e, t) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c595 = function(e, precision) {\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c596 = function(e, precision, scale) {\n            // => IGNORE\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c597 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          // => IGNORE\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c598 = function(s, c) {\n          /*\n            => {\n              expr_list: expr_list | {type: 'origin', value: ident },\n              type: string,\n              keyword: string,\n              brackets: boolean\n            }\n          */\n          return {\n            expr_list: c || { type: 'origin', value: '' },\n            type: 'array',\n            keyword: 'array',\n            brackets: true\n          }\n        },\n      peg$c599 = function(head, tail) {\n          // => literal[]\n            return createList(head, tail);\n          },\n      peg$c600 = function() {\n          // => { type: 'null'; value: null }\n            return { type: 'null', value: null };\n          },\n      peg$c601 = function() {\n          // => { type: 'not null'; value: 'not null' }\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c602 = function() {\n            // => { type: 'bool', value: true }\n            return { type: 'bool', value: true };\n          },\n      peg$c603 = function() {\n            //=> { type: 'bool', value: false }\n            return { type: 'bool', value: false };\n          },\n      peg$c604 = /^[\\n]/,\n      peg$c605 = peg$classExpectation([\"\\n\"], false, false),\n      peg$c606 = function(ca, fs) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: `${ca[1].join('')}${fs[1].join('')}`\n            };\n          },\n      peg$c607 = function(ca) {\n            // => { type: 'single_quote_string'; value: string; }\n            return {\n              type: 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c608 = function(ca) {\n            // => { type: 'string'; value: string; }\n            return {\n              type: 'double_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c609 = function(type, ca) {\n            // => { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c610 = function(type, ca) {\n          // => { type: 'TIME' | 'DATE' | 'TIMESTAMP' | 'DATETIME', value: string }\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c611 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c612 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c613 = /^[^'\\\\]/,\n      peg$c614 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c615 = \"\\\\'\",\n      peg$c616 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c617 = function() { return \"\\\\'\";  },\n      peg$c618 = \"\\\\\\\"\",\n      peg$c619 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c620 = function() { return '\\\\\"';  },\n      peg$c621 = \"\\\\\\\\\",\n      peg$c622 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c623 = function() { return \"\\\\\\\\\"; },\n      peg$c624 = \"\\\\/\",\n      peg$c625 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c626 = function() { return \"\\\\/\";  },\n      peg$c627 = \"\\\\b\",\n      peg$c628 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c629 = function() { return \"\\b\"; },\n      peg$c630 = \"\\\\f\",\n      peg$c631 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c632 = function() { return \"\\f\"; },\n      peg$c633 = \"\\\\n\",\n      peg$c634 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c635 = function() { return \"\\n\"; },\n      peg$c636 = \"\\\\r\",\n      peg$c637 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c638 = function() { return \"\\r\"; },\n      peg$c639 = \"\\\\t\",\n      peg$c640 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c641 = function() { return \"\\t\"; },\n      peg$c642 = \"\\\\u\",\n      peg$c643 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c644 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c645 = \"\\\\\",\n      peg$c646 = peg$literalExpectation(\"\\\\\", false),\n      peg$c647 = function() { return \"\\\\\"; },\n      peg$c648 = \"''\",\n      peg$c649 = peg$literalExpectation(\"''\", false),\n      peg$c650 = function() { return \"''\" },\n      peg$c651 = /^[\\n\\r]/,\n      peg$c652 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c653 = function(n) {\n          // => number | { type: 'bigint'; value: string; }\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c654 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c655 = function(int_, frac) {\n          // => IGNORE\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c656 = function(int_, exp) {\n          // => IGNORE\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c657 = function(int_) {\n          // => IGNORE\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c658 = function(op, digits) { return \"-\" + digits; },\n      peg$c659 = function(op, digit) { return \"-\" + digit; },\n      peg$c660 = \".\",\n      peg$c661 = peg$literalExpectation(\".\", false),\n      peg$c662 = function(digits) { return \".\" + digits; },\n      peg$c663 = function(e, digits) { return e + digits; },\n      peg$c664 = function(digits) { return digits.join(\"\"); },\n      peg$c665 = /^[0-9]/,\n      peg$c666 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c667 = /^[0-9a-fA-F]/,\n      peg$c668 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c669 = /^[eE]/,\n      peg$c670 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c671 = /^[+\\-]/,\n      peg$c672 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c673 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c674 = \"null\",\n      peg$c675 = peg$literalExpectation(\"NULL\", true),\n      peg$c676 = \"not null\",\n      peg$c677 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c678 = \"true\",\n      peg$c679 = peg$literalExpectation(\"TRUE\", true),\n      peg$c680 = \"to\",\n      peg$c681 = peg$literalExpectation(\"TO\", true),\n      peg$c682 = \"false\",\n      peg$c683 = peg$literalExpectation(\"FALSE\", true),\n      peg$c684 = \"show\",\n      peg$c685 = peg$literalExpectation(\"SHOW\", true),\n      peg$c686 = \"drop\",\n      peg$c687 = peg$literalExpectation(\"DROP\", true),\n      peg$c688 = function() { return 'DROP'; },\n      peg$c689 = \"use\",\n      peg$c690 = peg$literalExpectation(\"USE\", true),\n      peg$c691 = \"alter\",\n      peg$c692 = peg$literalExpectation(\"ALTER\", true),\n      peg$c693 = \"select\",\n      peg$c694 = peg$literalExpectation(\"SELECT\", true),\n      peg$c695 = \"update\",\n      peg$c696 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c697 = \"create\",\n      peg$c698 = peg$literalExpectation(\"CREATE\", true),\n      peg$c699 = \"temporary\",\n      peg$c700 = peg$literalExpectation(\"TEMPORARY\", true),\n      peg$c701 = function() { return 'TEMPORARY'; },\n      peg$c702 = \"temp\",\n      peg$c703 = peg$literalExpectation(\"TEMP\", true),\n      peg$c704 = function() { return 'TEMP'; },\n      peg$c705 = \"if not exists\",\n      peg$c706 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c707 = \"delete\",\n      peg$c708 = peg$literalExpectation(\"DELETE\", true),\n      peg$c709 = \"insert\",\n      peg$c710 = peg$literalExpectation(\"INSERT\", true),\n      peg$c711 = \"RECURSIVE\",\n      peg$c712 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c713 = \"replace\",\n      peg$c714 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c715 = \"returning\",\n      peg$c716 = peg$literalExpectation(\"RETURNING\", true),\n      peg$c717 = function() { return 'RETURNING' },\n      peg$c718 = \"rename\",\n      peg$c719 = peg$literalExpectation(\"RENAME\", true),\n      peg$c720 = \"explain\",\n      peg$c721 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c722 = \"partition\",\n      peg$c723 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c724 = function() { return 'PARTITION' },\n      peg$c725 = \"into\",\n      peg$c726 = peg$literalExpectation(\"INTO\", true),\n      peg$c727 = \"from\",\n      peg$c728 = peg$literalExpectation(\"FROM\", true),\n      peg$c729 = \"as\",\n      peg$c730 = peg$literalExpectation(\"AS\", true),\n      peg$c731 = \"table\",\n      peg$c732 = peg$literalExpectation(\"TABLE\", true),\n      peg$c733 = function() { return 'TABLE'; },\n      peg$c734 = \"database\",\n      peg$c735 = peg$literalExpectation(\"DATABASE\", true),\n      peg$c736 = function() { return 'DATABASE'; },\n      peg$c737 = \"scheme\",\n      peg$c738 = peg$literalExpectation(\"SCHEME\", true),\n      peg$c739 = function() { return 'SCHEME'; },\n      peg$c740 = \"sequence\",\n      peg$c741 = peg$literalExpectation(\"SEQUENCE\", true),\n      peg$c742 = function() { return 'SEQUENCE'; },\n      peg$c743 = \"tablespace\",\n      peg$c744 = peg$literalExpectation(\"TABLESPACE\", true),\n      peg$c745 = function() { return 'TABLESPACE'; },\n      peg$c746 = function() { return 'COLLATE'; },\n      peg$c747 = \"left\",\n      peg$c748 = peg$literalExpectation(\"LEFT\", true),\n      peg$c749 = \"right\",\n      peg$c750 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c751 = \"full\",\n      peg$c752 = peg$literalExpectation(\"FULL\", true),\n      peg$c753 = \"inner\",\n      peg$c754 = peg$literalExpectation(\"INNER\", true),\n      peg$c755 = \"join\",\n      peg$c756 = peg$literalExpectation(\"JOIN\", true),\n      peg$c757 = \"outer\",\n      peg$c758 = peg$literalExpectation(\"OUTER\", true),\n      peg$c759 = \"union\",\n      peg$c760 = peg$literalExpectation(\"UNION\", true),\n      peg$c761 = \"values\",\n      peg$c762 = peg$literalExpectation(\"VALUES\", true),\n      peg$c763 = \"using\",\n      peg$c764 = peg$literalExpectation(\"USING\", true),\n      peg$c765 = \"where\",\n      peg$c766 = peg$literalExpectation(\"WHERE\", true),\n      peg$c767 = \"group\",\n      peg$c768 = peg$literalExpectation(\"GROUP\", true),\n      peg$c769 = \"by\",\n      peg$c770 = peg$literalExpectation(\"BY\", true),\n      peg$c771 = \"order\",\n      peg$c772 = peg$literalExpectation(\"ORDER\", true),\n      peg$c773 = \"having\",\n      peg$c774 = peg$literalExpectation(\"HAVING\", true),\n      peg$c775 = \"window\",\n      peg$c776 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c777 = \"limit\",\n      peg$c778 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c779 = \"offset\",\n      peg$c780 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c781 = function() { return 'OFFSET' },\n      peg$c782 = \"asc\",\n      peg$c783 = peg$literalExpectation(\"ASC\", true),\n      peg$c784 = function() { return 'ASC'; },\n      peg$c785 = \"desc\",\n      peg$c786 = peg$literalExpectation(\"DESC\", true),\n      peg$c787 = function() { return 'DESC'; },\n      peg$c788 = \"all\",\n      peg$c789 = peg$literalExpectation(\"ALL\", true),\n      peg$c790 = function() { return 'ALL'; },\n      peg$c791 = \"distinct\",\n      peg$c792 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c793 = function() { return 'DISTINCT';},\n      peg$c794 = \"between\",\n      peg$c795 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c796 = function() { return 'BETWEEN'; },\n      peg$c797 = function() { return 'IN'; },\n      peg$c798 = \"is\",\n      peg$c799 = peg$literalExpectation(\"IS\", true),\n      peg$c800 = function() { return 'IS'; },\n      peg$c801 = \"like\",\n      peg$c802 = peg$literalExpectation(\"LIKE\", true),\n      peg$c803 = function() { return 'LIKE'; },\n      peg$c804 = \"ilike\",\n      peg$c805 = peg$literalExpectation(\"ILIKE\", true),\n      peg$c806 = function() { return 'ILIKE'; },\n      peg$c807 = \"exists\",\n      peg$c808 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c809 = function() { /* => 'EXISTS' */ return 'EXISTS'; },\n      peg$c810 = function() { return 'NOT'; },\n      peg$c811 = \"and\",\n      peg$c812 = peg$literalExpectation(\"AND\", true),\n      peg$c813 = function() { return 'AND'; },\n      peg$c814 = \"or\",\n      peg$c815 = peg$literalExpectation(\"OR\", true),\n      peg$c816 = function() { return 'OR'; },\n      peg$c817 = \"array\",\n      peg$c818 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c819 = function() { return 'ARRAY'; },\n      peg$c820 = \"array_agg\",\n      peg$c821 = peg$literalExpectation(\"ARRAY_AGG\", true),\n      peg$c822 = function() { return 'ARRAY_AGG'; },\n      peg$c823 = \"count\",\n      peg$c824 = peg$literalExpectation(\"COUNT\", true),\n      peg$c825 = function() { return 'COUNT'; },\n      peg$c826 = \"group_concat\",\n      peg$c827 = peg$literalExpectation(\"GROUP_CONCAT\", true),\n      peg$c828 = function() { return 'GROUP_CONCAT'; },\n      peg$c829 = \"max\",\n      peg$c830 = peg$literalExpectation(\"MAX\", true),\n      peg$c831 = function() { return 'MAX'; },\n      peg$c832 = \"min\",\n      peg$c833 = peg$literalExpectation(\"MIN\", true),\n      peg$c834 = function() { return 'MIN'; },\n      peg$c835 = \"sum\",\n      peg$c836 = peg$literalExpectation(\"SUM\", true),\n      peg$c837 = function() { return 'SUM'; },\n      peg$c838 = \"avg\",\n      peg$c839 = peg$literalExpectation(\"AVG\", true),\n      peg$c840 = function() { return 'AVG'; },\n      peg$c841 = \"extract\",\n      peg$c842 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c843 = function() { return 'EXTRACT'; },\n      peg$c844 = \"call\",\n      peg$c845 = peg$literalExpectation(\"CALL\", true),\n      peg$c846 = function() { return 'CALL'; },\n      peg$c847 = \"case\",\n      peg$c848 = peg$literalExpectation(\"CASE\", true),\n      peg$c849 = \"when\",\n      peg$c850 = peg$literalExpectation(\"WHEN\", true),\n      peg$c851 = \"then\",\n      peg$c852 = peg$literalExpectation(\"THEN\", true),\n      peg$c853 = \"else\",\n      peg$c854 = peg$literalExpectation(\"ELSE\", true),\n      peg$c855 = \"end\",\n      peg$c856 = peg$literalExpectation(\"END\", true),\n      peg$c857 = \"cast\",\n      peg$c858 = peg$literalExpectation(\"CAST\", true),\n      peg$c859 = \"bool\",\n      peg$c860 = peg$literalExpectation(\"BOOL\", true),\n      peg$c861 = function() { return 'BOOL'; },\n      peg$c862 = \"boolean\",\n      peg$c863 = peg$literalExpectation(\"BOOLEAN\", true),\n      peg$c864 = function() { return 'BOOLEAN'; },\n      peg$c865 = \"char\",\n      peg$c866 = peg$literalExpectation(\"CHAR\", true),\n      peg$c867 = function() { return 'CHAR'; },\n      peg$c868 = \"varchar\",\n      peg$c869 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c870 = function() { return 'VARCHAR';},\n      peg$c871 = \"numeric\",\n      peg$c872 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c873 = function() { return 'NUMERIC'; },\n      peg$c874 = \"decimal\",\n      peg$c875 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c876 = function() { return 'DECIMAL'; },\n      peg$c877 = \"signed\",\n      peg$c878 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c879 = function() { return 'SIGNED'; },\n      peg$c880 = \"unsigned\",\n      peg$c881 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c882 = function() { return 'UNSIGNED'; },\n      peg$c883 = \"int\",\n      peg$c884 = peg$literalExpectation(\"INT\", true),\n      peg$c885 = function() { return 'INT'; },\n      peg$c886 = \"zerofill\",\n      peg$c887 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c888 = function() { return 'ZEROFILL'; },\n      peg$c889 = \"integer\",\n      peg$c890 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c891 = function() { return 'INTEGER'; },\n      peg$c892 = \"json\",\n      peg$c893 = peg$literalExpectation(\"JSON\", true),\n      peg$c894 = function() { return 'JSON'; },\n      peg$c895 = \"jsonb\",\n      peg$c896 = peg$literalExpectation(\"JSONB\", true),\n      peg$c897 = function() { return 'JSONB'; },\n      peg$c898 = \"geometry\",\n      peg$c899 = peg$literalExpectation(\"GEOMETRY\", true),\n      peg$c900 = function() { return 'GEOMETRY'; },\n      peg$c901 = \"smallint\",\n      peg$c902 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c903 = function() { return 'SMALLINT'; },\n      peg$c904 = \"serial\",\n      peg$c905 = peg$literalExpectation(\"SERIAL\", true),\n      peg$c906 = function() { return 'SERIAL'; },\n      peg$c907 = \"tinyint\",\n      peg$c908 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c909 = function() { return 'TINYINT'; },\n      peg$c910 = \"tinytext\",\n      peg$c911 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c912 = function() { return 'TINYTEXT'; },\n      peg$c913 = \"text\",\n      peg$c914 = peg$literalExpectation(\"TEXT\", true),\n      peg$c915 = function() { return 'TEXT'; },\n      peg$c916 = \"mediumtext\",\n      peg$c917 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c918 = function() { return 'MEDIUMTEXT'; },\n      peg$c919 = \"longtext\",\n      peg$c920 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c921 = function() { return 'LONGTEXT'; },\n      peg$c922 = \"bigint\",\n      peg$c923 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c924 = function() { return 'BIGINT'; },\n      peg$c925 = \"enum\",\n      peg$c926 = peg$literalExpectation(\"ENUM\", true),\n      peg$c927 = function() { return 'ENUM'; },\n      peg$c928 = \"float\",\n      peg$c929 = peg$literalExpectation(\"FLOAT\", true),\n      peg$c930 = function() { return 'FLOAT'; },\n      peg$c931 = \"double\",\n      peg$c932 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c933 = function() { return 'DOUBLE'; },\n      peg$c934 = \"date\",\n      peg$c935 = peg$literalExpectation(\"DATE\", true),\n      peg$c936 = function() { return 'DATE'; },\n      peg$c937 = \"datetime\",\n      peg$c938 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c939 = function() { return 'DATETIME'; },\n      peg$c940 = \"rows\",\n      peg$c941 = peg$literalExpectation(\"ROWS\", true),\n      peg$c942 = function() { return 'ROWS'; },\n      peg$c943 = \"time\",\n      peg$c944 = peg$literalExpectation(\"TIME\", true),\n      peg$c945 = function() { return 'TIME'; },\n      peg$c946 = \"timestamp\",\n      peg$c947 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c948 = function() { return 'TIMESTAMP'; },\n      peg$c949 = \"truncate\",\n      peg$c950 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c951 = function() { return 'TRUNCATE'; },\n      peg$c952 = \"user\",\n      peg$c953 = peg$literalExpectation(\"USER\", true),\n      peg$c954 = function() { return 'USER'; },\n      peg$c955 = \"uuid\",\n      peg$c956 = peg$literalExpectation(\"UUID\", true),\n      peg$c957 = function() { return 'UUID'; },\n      peg$c958 = \"current_date\",\n      peg$c959 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c960 = function() { return 'CURRENT_DATE'; },\n      peg$c961 = \"adddate\",\n      peg$c962 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c963 = function() { return 'ADDDATE'; },\n      peg$c964 = \"interval\",\n      peg$c965 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c966 = function() { return 'INTERVAL'; },\n      peg$c967 = function() { return 'YEAR'; },\n      peg$c968 = function() { return 'MONTH'; },\n      peg$c969 = function() { return 'DAY'; },\n      peg$c970 = function() { return 'HOUR'; },\n      peg$c971 = function() { return 'MINUTE'; },\n      peg$c972 = function() { return 'SECOND'; },\n      peg$c973 = \"current_time\",\n      peg$c974 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c975 = function() { return 'CURRENT_TIME'; },\n      peg$c976 = \"current_timestamp\",\n      peg$c977 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c978 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c979 = \"current_user\",\n      peg$c980 = peg$literalExpectation(\"CURRENT_USER\", true),\n      peg$c981 = function() { return 'CURRENT_USER'; },\n      peg$c982 = \"session_user\",\n      peg$c983 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c984 = function() { return 'SESSION_USER'; },\n      peg$c985 = \"system_user\",\n      peg$c986 = peg$literalExpectation(\"SYSTEM_USER\", true),\n      peg$c987 = function() { return 'SYSTEM_USER'; },\n      peg$c988 = \"global\",\n      peg$c989 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c990 = function() { return 'GLOBAL'; },\n      peg$c991 = \"session\",\n      peg$c992 = peg$literalExpectation(\"SESSION\", true),\n      peg$c993 = function() { return 'SESSION'; },\n      peg$c994 = \"local\",\n      peg$c995 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c996 = function() { return 'LOCAL'; },\n      peg$c997 = \"persist\",\n      peg$c998 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c999 = function() { return 'PERSIST'; },\n      peg$c1000 = \"persist_only\",\n      peg$c1001 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c1002 = function() { return 'PERSIST_ONLY'; },\n      peg$c1003 = \"@\",\n      peg$c1004 = peg$literalExpectation(\"@\", false),\n      peg$c1005 = \"@@\",\n      peg$c1006 = peg$literalExpectation(\"@@\", false),\n      peg$c1007 = \"return\",\n      peg$c1008 = peg$literalExpectation(\"return\", true),\n      peg$c1009 = \":=\",\n      peg$c1010 = peg$literalExpectation(\":=\", false),\n      peg$c1011 = \"::\",\n      peg$c1012 = peg$literalExpectation(\"::\", false),\n      peg$c1013 = \"dual\",\n      peg$c1014 = peg$literalExpectation(\"DUAL\", true),\n      peg$c1015 = \"add\",\n      peg$c1016 = peg$literalExpectation(\"ADD\", true),\n      peg$c1017 = function() { return 'ADD'; },\n      peg$c1018 = \"column\",\n      peg$c1019 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c1020 = function() { return 'COLUMN'; },\n      peg$c1021 = \"index\",\n      peg$c1022 = peg$literalExpectation(\"INDEX\", true),\n      peg$c1023 = function() { return 'INDEX'; },\n      peg$c1024 = function() { return 'KEY'; },\n      peg$c1025 = \"fulltext\",\n      peg$c1026 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c1027 = function() { return 'FULLTEXT'; },\n      peg$c1028 = \"spatial\",\n      peg$c1029 = peg$literalExpectation(\"SPATIAL\", true),\n      peg$c1030 = function() { return 'SPATIAL'; },\n      peg$c1031 = function() { return 'UNIQUE'; },\n      peg$c1032 = function() { return 'KEY_BLOCK_SIZE'; },\n      peg$c1033 = \"comment\",\n      peg$c1034 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c1035 = function() { return 'COMMENT'; },\n      peg$c1036 = \"constraint\",\n      peg$c1037 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c1038 = function() { return 'CONSTRAINT'; },\n      peg$c1039 = \"concurrently\",\n      peg$c1040 = peg$literalExpectation(\"CONCURRENTLY\", true),\n      peg$c1041 = function() { return 'CONCURRENTLY'; },\n      peg$c1042 = \"references\",\n      peg$c1043 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c1044 = function() { return 'REFERENCES'; },\n      peg$c1045 = \"sql_calc_found_rows\",\n      peg$c1046 = peg$literalExpectation(\"SQL_CALC_FOUND_ROWS\", true),\n      peg$c1047 = \"sql_cache\",\n      peg$c1048 = peg$literalExpectation(\"SQL_CACHE\", true),\n      peg$c1049 = \"sql_no_cache\",\n      peg$c1050 = peg$literalExpectation(\"SQL_NO_CACHE\", true),\n      peg$c1051 = \"sql_small_result\",\n      peg$c1052 = peg$literalExpectation(\"SQL_SMALL_RESULT\", true),\n      peg$c1053 = \"sql_big_result\",\n      peg$c1054 = peg$literalExpectation(\"SQL_BIG_RESULT\", true),\n      peg$c1055 = \"sql_buffer_result\",\n      peg$c1056 = peg$literalExpectation(\"SQL_BUFFER_RESULT\", true),\n      peg$c1057 = \",\",\n      peg$c1058 = peg$literalExpectation(\",\", false),\n      peg$c1059 = \"[\",\n      peg$c1060 = peg$literalExpectation(\"[\", false),\n      peg$c1061 = \"]\",\n      peg$c1062 = peg$literalExpectation(\"]\", false),\n      peg$c1063 = \";\",\n      peg$c1064 = peg$literalExpectation(\";\", false),\n      peg$c1065 = \"->\",\n      peg$c1066 = peg$literalExpectation(\"->\", false),\n      peg$c1067 = \"->>\",\n      peg$c1068 = peg$literalExpectation(\"->>\", false),\n      peg$c1069 = \"#>\",\n      peg$c1070 = peg$literalExpectation(\"#>\", false),\n      peg$c1071 = \"#>>\",\n      peg$c1072 = peg$literalExpectation(\"#>>\", false),\n      peg$c1073 = \"||\",\n      peg$c1074 = peg$literalExpectation(\"||\", false),\n      peg$c1075 = \"&&\",\n      peg$c1076 = peg$literalExpectation(\"&&\", false),\n      peg$c1077 = \"/*\",\n      peg$c1078 = peg$literalExpectation(\"/*\", false),\n      peg$c1079 = \"*/\",\n      peg$c1080 = peg$literalExpectation(\"*/\", false),\n      peg$c1081 = \"--\",\n      peg$c1082 = peg$literalExpectation(\"--\", false),\n      peg$c1083 = \"#\",\n      peg$c1084 = peg$literalExpectation(\"#\", false),\n      peg$c1085 = function(k, s, c) {\n          // => { type: 'comment'; keyword: 'comment'; symbol: '='; value: literal_string; }\n          return {\n            type: k.toLowerCase(),\n            keyword: k.toLowerCase(),\n            symbol: s,\n            value: c,\n          }\n        },\n      peg$c1086 = peg$anyExpectation(),\n      peg$c1087 = /^[ \\t\\n\\r]/,\n      peg$c1088 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c1089 = function() { varList = []; return true; },\n      peg$c1090 = function(s) {\n            // => { type: 'proc'; stmt: assign_stmt | return_stmt; vars: any }\n            return { type: 'proc', stmt: s, vars: varList };\n          },\n      peg$c1091 = function(va, s, e) {\n          // => { type: 'assign'; left: var_decl | without_prefix_var_decl; symbol: ':=' | '='; right: proc_expr; }\n          return {\n            type: 'assign',\n            left: va,\n            symbol: s,\n            right: e\n          };\n        },\n      peg$c1092 = function(e) {\n          // => { type: 'return'; expr: proc_expr; }\n            return { type: 'return', expr: e };\n          },\n      peg$c1093 = function(lt, op, rt, expr) {\n          // => { type: 'join'; ltable: var_decl; rtable: var_decl; op: join_op; expr: on_clause; }\n            return {\n              type: 'join',\n              ltable: lt,\n              rtable: rt,\n              op: op,\n              on: expr\n            };\n          },\n      peg$c1094 = function(e) {\n          // => proc_additive_expr & { parentheses: true; }\n            e.parentheses = true;\n            return e;\n          },\n      peg$c1095 = function(dt, tail) {\n          // => string\n            let name = dt\n            if (tail !== null) {\n              name = `${dt}.${tail[3]}`\n            }\n            return name;\n          },\n      peg$c1096 = function(name, l) {\n          // => { type: 'function'; name: string; args: null | { type: expr_list; value: proc_primary_list; }}\n            //compatible with original func_call\n            return {\n              type: 'function',\n              name: name,\n              args: {\n                type: 'expr_list',\n                value: l\n              }\n            };\n          },\n      peg$c1097 = function(name) {\n          // => IGNORE\n          return {\n              type: 'function',\n              name: name,\n              args: null\n            };\n        },\n      peg$c1098 = function(head, tail) {\n          // => proc_primary[]\n            return createList(head, tail);\n          },\n      peg$c1099 = function(l) {\n          // => { type: 'array'; value: proc_primary_list }\n          return { type: 'array', value: l };\n        },\n      peg$c1100 = function(p, d) {\n          // => without_prefix_var_decl & { type: 'var'; prefix: string; };\n          //push for analysis\n          return {\n            type: 'var',\n            ...d,\n            prefix: p\n          };\n        },\n      peg$c1101 = function(name, m) {\n          // => { type: 'var'; prefix: string; name: ident_name; members: mem_chain; }\n          //push for analysis\n          varList.push(name);\n          return {\n            type: 'var',\n            name: name,\n            members: m,\n            prefix: null,\n          };\n        },\n      peg$c1102 = function(l) {\n          // => ident_name[];\n          const s = [];\n          for (let i = 0; i < l.length; i++) {\n            s.push(l[i][1]);\n          }\n          return s;\n        },\n      peg$c1103 = function(t) {\n          /* => data_type */\n          return { ...t, array: 'two' }\n        },\n      peg$c1104 = function(t) {\n          /* => data_type */\n          return { ...t, array: 'one' }\n        },\n      peg$c1105 = function(t) { /* => data_type */ return { dataType: t }},\n      peg$c1106 = function(t, l) {\n          // => data_type\n          return { dataType: t, length: parseInt(l.join(''), 10) };\n        },\n      peg$c1107 = function(t) { /* =>  data_type */ return { dataType: t }; },\n      peg$c1108 = function(t) { /* =>  data_type */  return { dataType: t }; },\n      peg$c1109 = function(un, ze) {\n          // => any[];\n          const result = []\n          if (un) result.push(un)\n          if (ze) result.push(ze)\n          return result\n        },\n      peg$c1110 = function(t, l, r, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), scale: r && parseInt(r[2].join(''), 10), parentheses: true, suffix: s }; },\n      peg$c1111 = function(t, l, s) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10), suffix: s }; },\n      peg$c1112 = function(t, s) { /* =>  data_type */ return { dataType: t, suffix: s }; },\n      peg$c1113 = function(t, l) { /* =>  data_type */ return { dataType: t, length: parseInt(l.join(''), 10) }; },\n      peg$c1114 = function(t, e) {\n          /* =>  data_type */\n          e.parentheses = true\n          return {\n            dataType: t,\n            expr: e\n          }\n        },\n      peg$c1115 = function(t) {/* =>  data_type */  return { dataType: t }; },\n      peg$c1116 = function(t) { /* =>  data_type */ return { dataType: `${t}[]` }},\n      peg$c1117 = function(t) { /* =>  data_type */ return { dataType: t }},\n      peg$c1118 = function(t) {/* =>  data_type */  return { dataType: t }},\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsecmd_stmt();\n        if (s2 === peg$FAILED) {\n          s2 = peg$parsecrud_stmt();\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecmd_stmt() {\n    var s0;\n\n    s0 = peg$parsedrop_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsetruncate_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserename_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecall_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseuse_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsealter_table_stmt();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseset_stmt();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parselock_stmt();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseshow_stmt();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_stmt() {\n    var s0;\n\n    s0 = peg$parsecreate_table_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_trigger();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_extension_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_index_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecreate_sequence();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecreate_db_stmt();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecrud_stmt() {\n    var s0;\n\n    s0 = peg$parseunion_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseupdate_stmt();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsereplace_insert_stmt();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseinsert_no_columns_stmt();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedelete_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecmd_stmt();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseproc_stmts();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecrud_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecrud_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecrud_stmt();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_UNION();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseKW_ALL();\n            if (s7 === peg$FAILED) {\n              s7 = null;\n            }\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseselect_stmt();\n                if (s9 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7, s8, s9];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_UNION();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseKW_ALL();\n              if (s7 === peg$FAILED) {\n                s7 = null;\n              }\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseselect_stmt();\n                  if (s9 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8, s9];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseorder_by_clause();\n          if (s4 === peg$FAILED) {\n            s4 = null;\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parselimit_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c2(s1, s2, s4, s6);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_extension_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c3) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_IF_NOT_EXISTS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseliteral_string();\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_WITH();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c5) {\n                          s12 = input.substr(peg$currPos, 6);\n                          peg$currPos += 6;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parseident_name();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = peg$parseliteral_string();\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$currPos;\n                            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c7) {\n                              s14 = input.substr(peg$currPos, 7);\n                              peg$currPos += 7;\n                            } else {\n                              s14 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c8); }\n                            }\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parse__();\n                              if (s15 !== peg$FAILED) {\n                                s16 = peg$parseident_name();\n                                if (s16 === peg$FAILED) {\n                                  s16 = peg$parseliteral_string();\n                                }\n                                if (s16 !== peg$FAILED) {\n                                  s14 = [s14, s15, s16];\n                                  s13 = s14;\n                                } else {\n                                  peg$currPos = s13;\n                                  s13 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s13;\n                                s13 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s13;\n                              s13 = peg$FAILED;\n                            }\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$currPos;\n                                s16 = peg$parseKW_FROM();\n                                if (s16 !== peg$FAILED) {\n                                  s17 = peg$parse__();\n                                  if (s17 !== peg$FAILED) {\n                                    s18 = peg$parseident_name();\n                                    if (s18 === peg$FAILED) {\n                                      s18 = peg$parseliteral_string();\n                                    }\n                                    if (s18 !== peg$FAILED) {\n                                      s16 = [s16, s17, s18];\n                                      s15 = s16;\n                                    } else {\n                                      peg$currPos = s15;\n                                      s15 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s15;\n                                    s15 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s15;\n                                  s15 = peg$FAILED;\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c9(s1, s3, s5, s7, s9, s11, s13, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_option_character_set();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_option_character_set();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_option_character_set();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c10(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_db_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DATABASE();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SCHEME();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_IF_NOT_EXISTS();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecreate_db_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c11(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_TABLE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_IF_NOT_EXISTS();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_ref_list();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecreate_table_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseKW_IGNORE();\n                                if (s15 === peg$FAILED) {\n                                  s15 = peg$parseKW_REPLACE();\n                                }\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseKW_AS();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parseunion_stmt();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c12(s1, s3, s7, s9, s11, s13, s15, s17, s19);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CREATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_TEMPORARY();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_TABLE();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_IF_NOT_EXISTS();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_ref_list();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecreate_like_table();\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c13(s1, s3, s7, s9, s11);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TEMPORARY();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_TEMP();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SEQUENCE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_IF_NOT_EXISTS();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsetable_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$currPos;\n                        s12 = peg$parseKW_AS();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parse__();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parsealias_ident();\n                            if (s14 !== peg$FAILED) {\n                              s12 = [s12, s13, s14];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsecreate_sequence_definition_list();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c14(s1, s3, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_increment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c15) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c17(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_minval() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c18) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c21) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c18) {\n            s3 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c19); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c23();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_maxval() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2).toLowerCase() === peg$c21) {\n        s1 = input.substr(peg$currPos, 2);\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c22); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c24) {\n            s3 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c25); }\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c26();\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_start() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c27) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c28); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_WITH();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c29(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_cache() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c30) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c31); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_numeric();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c20(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_cycle() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c21) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c32) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c34(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesequence_definition_owned() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c35) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c36); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c37) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c39();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c35) {\n        s1 = input.substr(peg$currPos, 5);\n        peg$currPos += 5;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BY();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c40(s1, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence_definition() {\n    var s0;\n\n    s0 = peg$parsesequence_definition_increment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesequence_definition_minval();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsesequence_definition_maxval();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsesequence_definition_start();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsesequence_definition_cache();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsesequence_definition_cycle();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsesequence_definition_owned();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_sequence_definition_list() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecreate_sequence_definition();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsecreate_sequence_definition();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsecreate_sequence_definition();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c41(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_CONCURRENTLY();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseKW_ON();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsetable_name();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseindex_type();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parseLPAREN();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsecolumn_order_list();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parseRPAREN();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$currPos;\n                                                s24 = peg$parseKW_WITH();\n                                                if (s24 !== peg$FAILED) {\n                                                  s25 = peg$parse__();\n                                                  if (s25 !== peg$FAILED) {\n                                                    s26 = peg$parseLPAREN();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseindex_options_list();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s29 = peg$parse__();\n                                                          if (s29 !== peg$FAILED) {\n                                                            s30 = peg$parseRPAREN();\n                                                            if (s30 !== peg$FAILED) {\n                                                              s24 = [s24, s25, s26, s27, s28, s29, s30];\n                                                              s23 = s24;\n                                                            } else {\n                                                              peg$currPos = s23;\n                                                              s23 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s23;\n                                                            s23 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s23;\n                                                          s23 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s23;\n                                                        s23 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s23;\n                                                      s23 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s23;\n                                                    s23 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s23;\n                                                  s23 = peg$FAILED;\n                                                }\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$currPos;\n                                                    s26 = peg$parseKW_TABLESPACE();\n                                                    if (s26 !== peg$FAILED) {\n                                                      s27 = peg$parse__();\n                                                      if (s27 !== peg$FAILED) {\n                                                        s28 = peg$parseident_name();\n                                                        if (s28 !== peg$FAILED) {\n                                                          s26 = [s26, s27, s28];\n                                                          s25 = s26;\n                                                        } else {\n                                                          peg$currPos = s25;\n                                                          s25 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s25;\n                                                        s25 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s25;\n                                                      s25 = peg$FAILED;\n                                                    }\n                                                    if (s25 === peg$FAILED) {\n                                                      s25 = null;\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        s27 = peg$parsewhere_clause();\n                                                        if (s27 === peg$FAILED) {\n                                                          s27 = null;\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            peg$savedPos = s0;\n                                                            s1 = peg$c42(s1, s3, s5, s7, s9, s11, s13, s15, s19, s23, s25, s27);\n                                                            s0 = s1;\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_order();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_order();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_order();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c43(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_order() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecollate_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_ASC();\n                if (s7 === peg$FAILED) {\n                  s7 = peg$parseKW_DESC();\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$currPos;\n                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {\n                      s10 = input.substr(peg$currPos, 5);\n                      peg$currPos += 5;\n                    } else {\n                      s10 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parse__();\n                      if (s11 !== peg$FAILED) {\n                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c46) {\n                          s12 = input.substr(peg$currPos, 5);\n                          peg$currPos += 5;\n                        } else {\n                          s12 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c47); }\n                        }\n                        if (s12 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c48) {\n                            s12 = input.substr(peg$currPos, 4);\n                            peg$currPos += 4;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c49); }\n                          }\n                        }\n                        if (s12 !== peg$FAILED) {\n                          s10 = [s10, s11, s12];\n                          s9 = s10;\n                        } else {\n                          peg$currPos = s9;\n                          s9 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s9;\n                        s9 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s9;\n                      s9 = peg$FAILED;\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c50(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table_simple() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c51(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_like_table() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecreate_like_table_simple();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecreate_like_table();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c52(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_table_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecreate_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecreate_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c53(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_column_definition();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_index_definition();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsecreate_constraint_definition();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecolumn_constraint();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c54) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c55); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c56(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c57) {\n          s2 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c58); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {\n              s4 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c60); }\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c61) {\n            s2 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c62); }\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {\n                s4 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c60); }\n              }\n              if (s4 !== peg$FAILED) {\n                s2 = [s2, s3, s4];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c63(s1);\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsekeyword_comment();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c64(s1);\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsecollate_expr();\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c65(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsecolumn_format();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c66(s1);\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                s1 = peg$parsestorage();\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c67(s1);\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsereference_definition();\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c68(s1);\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parsecreate_option_character_set_kw();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseKW_ASSIGIN_EQUAL();\n                        if (s3 === peg$FAILED) {\n                          s3 = null;\n                        }\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseident_name();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c69(s1, s3, s5);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_definition_opt_list() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_definition_opt();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$currPos;\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parsecolumn_definition_opt();\n          if (s6 !== peg$FAILED) {\n            s5 = [s5, s6];\n            s4 = s5;\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$currPos;\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parsecolumn_definition_opt();\n            if (s6 !== peg$FAILED) {\n              s5 = [s5, s6];\n              s4 = s5;\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c70(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_column_definition() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_definition_opt_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c71(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_constraint() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_not_null();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseliteral_null();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedefault_expr();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c72(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedefault_expr();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_not_null();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_null();\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c73(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecollate_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COLLATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c74(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_format() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c75) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c76); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c77) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c78); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c79) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c80); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c83(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestorage() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c84) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c85); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c86) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c87); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c88) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c89); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c90(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedefault_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseexpr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c91(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_index_opt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseALTER_ALGORITHM();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseALTER_LOCK();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseALTER_ALGORITHM();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseALTER_LOCK();\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseALTER_ALGORITHM();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseALTER_LOCK();\n          }\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c92(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedrop_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c93(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DROP();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_INDEX();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsecolumn_ref();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_ON();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsetable_name();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsedrop_index_opt();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c94(s1, s3, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetruncate_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUNCATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c95(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuse_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c96(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_table_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALTER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsealter_action_list();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c97(s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsealter_action();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsealter_action();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsealter_action();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c98(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealter_action() {\n    var s0;\n\n    s0 = peg$parseALTER_ADD_COLUMN();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseALTER_DROP_COLUMN();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseALTER_ADD_INDEX_OR_KEY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseALTER_RENAME_TABLE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseALTER_ALGORITHM();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseALTER_LOCK();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecreate_column_definition();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c99(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_DROP_COLUMN() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DROP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_COLUMN();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_ref();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c100(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_INDEX_OR_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c101(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_RENAME_TABLE() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_AS();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c102(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ALGORITHM() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c103) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c104); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 7).toLowerCase() === peg$c105) {\n                s5 = input.substr(peg$currPos, 7);\n                peg$currPos += 7;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c106); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c107) {\n                  s5 = input.substr(peg$currPos, 7);\n                  peg$currPos += 7;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c108); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 4).toLowerCase() === peg$c109) {\n                    s5 = input.substr(peg$currPos, 4);\n                    peg$currPos += 4;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c110); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c111(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_LOCK() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c112) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c82); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 4).toLowerCase() === peg$c37) {\n                s5 = input.substr(peg$currPos, 4);\n                peg$currPos += 4;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c38); }\n              }\n              if (s5 === peg$FAILED) {\n                if (input.substr(peg$currPos, 6).toLowerCase() === peg$c114) {\n                  s5 = input.substr(peg$currPos, 6);\n                  peg$currPos += 6;\n                } else {\n                  s5 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c115); }\n                }\n                if (s5 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c116) {\n                    s5 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c117); }\n                  }\n                }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c118(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INDEX();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_KEY();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c119(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_fulltext_spatial_index_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FULLTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_SPATIAL();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INDEX();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_KEY();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c120(s1, s3, s5, s7, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_definition() {\n    var s0;\n\n    s0 = peg$parsecreate_constraint_primary();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_constraint_unique();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecreate_constraint_foreign();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconstraint_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CONSTRAINT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseident();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c121(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_primary() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c122) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c123); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseindex_type();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_options();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c124(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_unique() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UNIQUE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_INDEX();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_KEY();\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseindex_type();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecte_column_definition();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseindex_options();\n                            if (s13 === peg$FAILED) {\n                              s13 = null;\n                            }\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c125(s1, s3, s5, s7, s9, s11, s13);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_foreign() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseconstraint_name();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c126) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c127); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecte_column_definition();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsereference_definition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c128(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_REFERENCES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecte_column_definition();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c129) {\n                  s7 = input.substr(peg$currPos, 10);\n                  peg$currPos += 10;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c130); }\n                }\n                if (s7 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 13).toLowerCase() === peg$c131) {\n                    s7 = input.substr(peg$currPos, 13);\n                    peg$currPos += 13;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c132); }\n                  }\n                  if (s7 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c133) {\n                      s7 = input.substr(peg$currPos, 12);\n                      peg$currPos += 12;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c134); }\n                    }\n                  }\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseon_reference();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseon_reference();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c135(s1, s3, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_reference() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c136) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c137); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c138) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c139); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsereference_option();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c140(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereference_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c141) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c142); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c143) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c144); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c145) {\n          s1 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c146); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c147) {\n            s1 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c148); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 11).toLowerCase() === peg$c149) {\n              s1 = input.substr(peg$currPos, 11);\n              peg$currPos += 11;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c150); }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c151(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecreate_constraint_trigger() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CREATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_CONSTRAINT();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c152) {\n              s5 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c153); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c154) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c155); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c156) {\n                        s9 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c157); }\n                      }\n                      if (s9 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c158) {\n                          s9 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s9 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c159); }\n                        }\n                      }\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsetrigger_event_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c160) {\n                              s13 = input.substr(peg$currPos, 2);\n                              peg$currPos += 2;\n                            } else {\n                              s13 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c161); }\n                            }\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsetable_name();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$currPos;\n                                    s18 = peg$parseKW_FROM();\n                                    if (s18 !== peg$FAILED) {\n                                      s19 = peg$parse__();\n                                      if (s19 !== peg$FAILED) {\n                                        s20 = peg$parsetable_name();\n                                        if (s20 !== peg$FAILED) {\n                                          s18 = [s18, s19, s20];\n                                          s17 = s18;\n                                        } else {\n                                          peg$currPos = s17;\n                                          s17 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s17;\n                                        s17 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s17;\n                                      s17 = peg$FAILED;\n                                    }\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parse__();\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parsetrigger_deferrable();\n                                        if (s19 === peg$FAILED) {\n                                          s19 = null;\n                                        }\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parse__();\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parsetrigger_for_row();\n                                            if (s21 === peg$FAILED) {\n                                              s21 = null;\n                                            }\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parse__();\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parsetrigger_when();\n                                                if (s23 === peg$FAILED) {\n                                                  s23 = null;\n                                                }\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parse__();\n                                                  if (s24 !== peg$FAILED) {\n                                                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c162) {\n                                                      s25 = input.substr(peg$currPos, 7);\n                                                      peg$currPos += 7;\n                                                    } else {\n                                                      s25 = peg$FAILED;\n                                                      if (peg$silentFails === 0) { peg$fail(peg$c163); }\n                                                    }\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parse__();\n                                                      if (s26 !== peg$FAILED) {\n                                                        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c164) {\n                                                          s27 = input.substr(peg$currPos, 9);\n                                                          peg$currPos += 9;\n                                                        } else {\n                                                          s27 = peg$FAILED;\n                                                          if (peg$silentFails === 0) { peg$fail(peg$c165); }\n                                                        }\n                                                        if (s27 !== peg$FAILED) {\n                                                          s28 = peg$parse__();\n                                                          if (s28 !== peg$FAILED) {\n                                                            s29 = peg$parseproc_func_call();\n                                                            if (s29 !== peg$FAILED) {\n                                                              peg$savedPos = s0;\n                                                              s1 = peg$c166(s1, s3, s5, s7, s9, s11, s13, s15, s17, s19, s21, s23, s25, s29);\n                                                              s0 = s1;\n                                                            } else {\n                                                              peg$currPos = s0;\n                                                              s0 = peg$FAILED;\n                                                            }\n                                                          } else {\n                                                            peg$currPos = s0;\n                                                            s0 = peg$FAILED;\n                                                          }\n                                                        } else {\n                                                          peg$currPos = s0;\n                                                          s0 = peg$FAILED;\n                                                        }\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DELETE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TRUNCATE();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c167(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_UPDATE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.substr(peg$currPos, 2).toLowerCase() === peg$c168) {\n            s4 = input.substr(peg$currPos, 2);\n            peg$currPos += 2;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c169); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_ref_list();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c170(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_event_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrigger_event();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetrigger_event();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetrigger_event();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c171(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_deferrable() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c172) {\n      s2 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c173); }\n    }\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c174) {\n          s4 = input.substr(peg$currPos, 10);\n          peg$currPos += 10;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c175); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 19).toLowerCase() === peg$c176) {\n          s3 = input.substr(peg$currPos, 19);\n          peg$currPos += 19;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c177); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 18).toLowerCase() === peg$c178) {\n            s3 = input.substr(peg$currPos, 18);\n            peg$currPos += 18;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c179); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c180(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_for_row() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c181) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c182); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c183) {\n          s3 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c184); }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {\n              s5 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c186); }\n            }\n            if (s5 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c187) {\n                s5 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c188); }\n              }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c189(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrigger_when() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c190(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_options() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c191(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set_kw() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c192) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c193); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c194) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c195); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c196();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecreate_option_character_set() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DEFAULT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_option_character_set_kw();\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c197) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c198); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c199) {\n              s3 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c200); }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseident_name();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c201(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_option() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c54) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c55); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 14).toLowerCase() === peg$c202) {\n        s1 = input.substr(peg$currPos, 14);\n        peg$currPos += 14;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c203); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 14).toLowerCase() === peg$c204) {\n          s1 = input.substr(peg$currPos, 14);\n          peg$currPos += 14;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c205); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 8).toLowerCase() === peg$c206) {\n            s1 = input.substr(peg$currPos, 8);\n            peg$currPos += 8;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c207); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c208) {\n              s1 = input.substr(peg$currPos, 8);\n              peg$currPos += 8;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c209); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 18).toLowerCase() === peg$c210) {\n                s1 = input.substr(peg$currPos, 18);\n                peg$currPos += 18;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c211); }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c212(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecreate_option_character_set();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_COMMENT();\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 10).toLowerCase() === peg$c213) {\n            s1 = input.substr(peg$currPos, 10);\n            peg$currPos += 10;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c214); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_ASSIGIN_EQUAL();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseliteral_string();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c215(s1, s3, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 11).toLowerCase() === peg$c216) {\n            s1 = input.substr(peg$currPos, 11);\n            peg$currPos += 11;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c217); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_ASSIGIN_EQUAL();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$currPos;\n                  if (input.charCodeAt(peg$currPos) === 39) {\n                    s6 = peg$c218;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c219); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c220) {\n                      s7 = input.substr(peg$currPos, 4);\n                      peg$currPos += 4;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c221); }\n                    }\n                    if (s7 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c222) {\n                        s7 = input.substr(peg$currPos, 3);\n                        peg$currPos += 3;\n                      } else {\n                        s7 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c223); }\n                      }\n                      if (s7 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c37) {\n                          s7 = input.substr(peg$currPos, 4);\n                          peg$currPos += 4;\n                        } else {\n                          s7 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c38); }\n                        }\n                      }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 39) {\n                        s8 = peg$c218;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c219); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s6 = [s6, s7, s8];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c224(s1, s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c225) {\n              s1 = input.substr(peg$currPos, 6);\n              peg$currPos += 6;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c226); }\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_ASSIGIN_EQUAL();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseident_name();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c227(s1, s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseALTER_ADD_FULLETXT_SPARITAL_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ADD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecreate_fulltext_spatial_index_definition();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c228(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserename_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RENAME();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_to_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c229(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SET();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_GLOBAL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_SESSION();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseKW_LOCAL();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseKW_PERSIST();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parseKW_PERSIST_ONLY();\n              }\n            }\n          }\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseassign_stmt();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c230(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_mode() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c231) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c232); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 12).toLowerCase() === peg$c233) {\n          s3 = input.substr(peg$currPos, 12);\n          peg$currPos += 12;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c234); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c235) {\n            s3 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c236); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 13).toLowerCase() === peg$c237) {\n              s3 = input.substr(peg$currPos, 13);\n              peg$currPos += 13;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c238); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 22).toLowerCase() === peg$c239) {\n                s3 = input.substr(peg$currPos, 22);\n                peg$currPos += 22;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c240); }\n              }\n              if (s3 === peg$FAILED) {\n                if (input.substr(peg$currPos, 19).toLowerCase() === peg$c241) {\n                  s3 = input.substr(peg$currPos, 19);\n                  peg$currPos += 19;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c242); }\n                }\n                if (s3 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 9).toLowerCase() === peg$c116) {\n                    s3 = input.substr(peg$currPos, 9);\n                    peg$currPos += 9;\n                  } else {\n                    s3 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c117); }\n                  }\n                  if (s3 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c243) {\n                      s3 = input.substr(peg$currPos, 16);\n                      peg$currPos += 16;\n                    } else {\n                      s3 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c244); }\n                    }\n                    if (s3 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 5).toLowerCase() === peg$c245) {\n                        s3 = input.substr(peg$currPos, 5);\n                        peg$currPos += 5;\n                      } else {\n                        s3 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c246); }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c247) {\n              s5 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c248); }\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c249(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselock_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LOCK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TABLE();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_ref_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselock_mode();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c250) {\n                      s9 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s9 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c251); }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c252(s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecall_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CALL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_func_call();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c253(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseshow_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SHOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c254) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c255); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c256();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c257;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c258); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c259;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c260); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c261(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c262(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseKW_WITH();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_RECURSIVE();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsecte_definition();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c263(s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_column_definition();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AS();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseunion_stmt();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c264(s1, s3, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_column_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecolumn();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecolumn();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseRPAREN();\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c265(s3, s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedistinct_on() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DISTINCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ON();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_ref_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c266(s1, s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c267(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseoption_clause();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsedistinct_on();\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsewhere_clause();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsegroup_by_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsehaving_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parseorder_by_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parselimit_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parsewindow_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    peg$savedPos = s0;\n                                                    s1 = peg$c268(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24);\n                                                    s0 = s1;\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseoption_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsequery_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsequery_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c269(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_option() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseOPT_SQL_CALC_FOUND_ROWS();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseOPT_SQL_CACHE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_NO_CACHE();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPT_SQL_BIG_RESULT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseOPT_SQL_SMALL_RESULT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseOPT_SQL_BUFFER_RESULT();\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c270(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ALL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseSTAR();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        peg$silentFails++;\n        s4 = peg$parseident_start();\n        peg$silentFails--;\n        if (s4 === peg$FAILED) {\n          s3 = void 0;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseSTAR();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c271(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn_list_item();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c272(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_index() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c273(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_item() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsearray_index();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c274(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestring_constants_escape();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c275(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseexpr_item();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DOUBLE_COLON();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsedata_type();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$currPos;\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parseadditive_operator();\n                if (s8 === peg$FAILED) {\n                  s8 = peg$parsemultiplicative_operator();\n                }\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parseexpr_item();\n                    if (s10 !== peg$FAILED) {\n                      s7 = [s7, s8, s9, s10];\n                      s6 = s7;\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                s6 = peg$currPos;\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseadditive_operator();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parsemultiplicative_operator();\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseexpr_item();\n                      if (s10 !== peg$FAILED) {\n                        s7 = [s7, s8, s9, s10];\n                        s6 = s7;\n                      } else {\n                        peg$currPos = s6;\n                        s6 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s6;\n                      s6 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s6;\n                    s6 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c276(s1, s3, s4, s5, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseDOT();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseSTAR();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c277(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseexpr_item();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsealias_clause();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c278(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c279(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c280(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c281(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c282(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c283(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_USING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c284) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c285); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c286) {\n            s3 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c287); }\n          }\n          if (s3 === peg$FAILED) {\n            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c288) {\n              s3 = input.substr(peg$currPos, 4);\n              peg$currPos += 4;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c289); }\n            }\n            if (s3 === peg$FAILED) {\n              if (input.substr(peg$currPos, 3).toLowerCase() === peg$c290) {\n                s3 = input.substr(peg$currPos, 3);\n                peg$currPos += 3;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c291); }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c292(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseindex_option();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseindex_option();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c293(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_options() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseindex_option();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseindex_option();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseindex_option();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c294(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseindex_option() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_KEY_BLOCK_SIZE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_numeric();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c295(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseident();\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c296(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseindex_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c297) {\n            s1 = input.substr(peg$currPos, 4);\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c298); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 6).toLowerCase() === peg$c299) {\n                s3 = input.substr(peg$currPos, 6);\n                peg$currPos += 6;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c300); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseident_name();\n                  if (s5 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c301(s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c302) {\n              s1 = input.substr(peg$currPos, 7);\n              peg$currPos += 7;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c303); }\n            }\n            if (s1 === peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c304) {\n                s1 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c305); }\n              }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c306(s1);\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsekeyword_comment();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c307(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c308(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c309(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c310(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c311(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c312(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DUAL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c313();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsevalue_clause();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsealias_clause();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c314(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseLPAREN();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseunion_stmt();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsevalue_clause();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsealias_clause();\n                    if (s7 === peg$FAILED) {\n                      s7 = null;\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c315(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsefunc_call();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parsealias_clause();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c278(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsetable_name();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 11).toLowerCase() === peg$c316) {\n                  s3 = input.substr(peg$currPos, 11);\n                  peg$currPos += 11;\n                } else {\n                  s3 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c317); }\n                }\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsefunc_call();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$currPos;\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c318) {\n                          s8 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s8 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c319); }\n                        }\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parse__();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parseLPAREN();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parse__();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parseliteral_numeric();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parse__();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parseRPAREN();\n                                    if (s14 !== peg$FAILED) {\n                                      s8 = [s8, s9, s10, s11, s12, s13, s14];\n                                      s7 = s8;\n                                    } else {\n                                      peg$currPos = s7;\n                                      s7 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s7;\n                                    s7 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s7;\n                                  s7 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s7;\n                                s7 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s7;\n                              s7 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s7;\n                            s7 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s7;\n                          s7 = peg$FAILED;\n                        }\n                        if (s7 === peg$FAILED) {\n                          s7 = null;\n                        }\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parsealias_clause();\n                            if (s9 === peg$FAILED) {\n                              s9 = null;\n                            }\n                            if (s9 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c320(s1, s5, s7, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsetable_name();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parsealias_clause();\n                  if (s3 === peg$FAILED) {\n                    s3 = null;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c321(s1, s3);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c322();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c323();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c324();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$currPos;\n          s2 = peg$parseKW_INNER();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = null;\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parseKW_JOIN();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c325();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c326(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c327(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseident();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseident();\n                if (s6 !== peg$FAILED) {\n                  s3 = [s3, s4, s5, s6];\n                  s2 = s3;\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 === peg$FAILED) {\n            s2 = null;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c328(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parsevar_decl();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c329(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c330(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c331(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c332(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_ref();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_ref();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_ref();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c333(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c334(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c335(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c336(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c337(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseident_name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c338(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsewindow_frame_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c339(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification_frameless() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsepartition_by_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseorder_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c340(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ROWS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsewindow_frame_following();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsewindow_frame_preceding();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c341(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_BETWEEN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsewindow_frame_preceding();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AND();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parsewindow_frame_following();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c342(s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c343) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c344); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c345(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c346) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c347); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c348(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c349) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c350); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c185) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c186); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c351();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c354(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c355(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c356(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c358(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ALL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseKW_OFFSET();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c359(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseupdate_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UPDATE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_SET();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseset_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsewhere_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c360(s3, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedelete_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DELETE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsefrom_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewhere_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c361(s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseset_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseset_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseset_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c362(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s5 = peg$c363;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c364); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c365(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseident();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s5 = peg$c363;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c364); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_VALUES();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseLPAREN();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parsecolumn_ref();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseRPAREN();\n                              if (s13 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c366(s1, s3, s11);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturning_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURNING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseSTAR();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecolumn_ref_list();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c367(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_value_clause() {\n    var s0;\n\n    s0 = peg$parsevalue_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseselect_stmt_nake();\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseident_name();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$currPos;\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseCOMMA();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parseident_name();\n                    if (s11 !== peg$FAILED) {\n                      s8 = [s8, s9, s10, s11];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$currPos;\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseCOMMA();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parseident_name();\n                      if (s11 !== peg$FAILED) {\n                        s8 = [s8, s9, s10, s11];\n                        s7 = s8;\n                      } else {\n                        peg$currPos = s7;\n                        s7 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c368(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_PARTITION();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevalue_item();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c369(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseLPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsecolumn_list();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parseinsert_value_clause();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parse__();\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parsereturning_stmt();\n                                    if (s17 === peg$FAILED) {\n                                      s17 = null;\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c370(s1, s5, s7, s11, s15, s17);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinsert_no_columns_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parsereplace_insert();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_INTO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseinsert_partition();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseinsert_value_clause();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsereturning_stmt();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c371(s1, s5, s7, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereplace_insert() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INSERT();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c372();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_REPLACE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c373();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VALUES();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c374(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevalue_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsevalue_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsevalue_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c375(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevalue_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c376(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c377(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c378(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_INTERVAL();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c379(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c380(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c381(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c382(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c383(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parselogic_operator_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseor_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseunary_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunion_stmt();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c384(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c385(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c386(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c388;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c389); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c363;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c364); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c390(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c391(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c392(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c393(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsejsonb_op_right();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c394(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c395) {\n      s0 = peg$c395;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c396); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c397;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c398); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c399) {\n          s0 = peg$c399;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c400); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c401) {\n            s0 = peg$c401;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c402); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c403;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c404); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c363;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c364); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c405) {\n                  s0 = peg$c405;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c406); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c407(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_IS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = peg$parseKW_DISTINCT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseKW_FROM();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsetable_name();\n                  if (s8 !== peg$FAILED) {\n                    s4 = [s4, s5, s6, s7, s8];\n                    s3 = s4;\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c408(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseKW_IS();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseKW_NOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseadditive_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c409(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c410(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c411(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 === peg$FAILED) {\n          s4 = peg$parseKW_ILIKE();\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c412(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_ILIKE();\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c413) {\n            s1 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c414); }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_TO();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c415();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c416(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c417(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c418(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsevar_decl();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parseliteral_string();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c419(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejsonb_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c420) {\n      s1 = peg$c420;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c421); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 2) === peg$c422) {\n        s1 = peg$c422;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c423); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseOPERATOR_CONCATENATION();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseDOUBLE_WELL_ARROW();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseWELL_ARROW();\n            if (s1 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 63) {\n                s1 = peg$c424;\n                peg$currPos++;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c425); }\n              }\n              if (s1 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c426) {\n                  s1 = peg$c426;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c427); }\n                }\n                if (s1 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 2) === peg$c428) {\n                    s1 = peg$c428;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c429); }\n                  }\n                  if (s1 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 2) === peg$c430) {\n                      s1 = peg$c430;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c431); }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_list_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c432(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c433;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c434); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c435;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c436); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c437(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c438;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c440;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c441); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c442;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c443); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsewindow_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsefunc_call();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsecase_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseinterval_expr();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  s1 = peg$parsecolumn_ref();\n                  if (s1 !== peg$FAILED) {\n                    s2 = peg$parse__();\n                    if (s2 !== peg$FAILED) {\n                      s3 = peg$parsearray_index();\n                      if (s3 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c444(s1, s3);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parsecolumn_ref();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseparam();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        s1 = peg$parseLPAREN();\n                        if (s1 !== peg$FAILED) {\n                          s2 = peg$parse__();\n                          if (s2 !== peg$FAILED) {\n                            s3 = peg$parseor_and_where_expr();\n                            if (s3 !== peg$FAILED) {\n                              s4 = peg$parse__();\n                              if (s4 !== peg$FAILED) {\n                                s5 = peg$parseRPAREN();\n                                if (s5 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c445(s3);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$parsevar_decl();\n                          if (s0 === peg$FAILED) {\n                            s0 = peg$currPos;\n                            s1 = peg$parse__();\n                            if (s1 !== peg$FAILED) {\n                              if (input.charCodeAt(peg$currPos) === 36) {\n                                s2 = peg$c446;\n                                peg$currPos++;\n                              } else {\n                                s2 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c447); }\n                              }\n                              if (s2 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 60) {\n                                  s3 = peg$c403;\n                                  peg$currPos++;\n                                } else {\n                                  s3 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c404); }\n                                }\n                                if (s3 !== peg$FAILED) {\n                                  s4 = peg$parseliteral_numeric();\n                                  if (s4 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 62) {\n                                      s5 = peg$c397;\n                                      peg$currPos++;\n                                    } else {\n                                      s5 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c398); }\n                                    }\n                                    if (s5 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c448(s2, s4);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                            if (s0 === peg$FAILED) {\n                              s0 = peg$currPos;\n                              s1 = peg$parse__();\n                              if (s1 !== peg$FAILED) {\n                                if (input.charCodeAt(peg$currPos) === 36) {\n                                  s2 = peg$c446;\n                                  peg$currPos++;\n                                } else {\n                                  s2 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c447); }\n                                }\n                                if (s2 !== peg$FAILED) {\n                                  s3 = peg$parseliteral_numeric();\n                                  if (s3 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c449(s2, s3);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestring_constants_escape() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c450) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c451); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s2 = peg$c218;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c219); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsesingle_char();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsesingle_char();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s6 = peg$c218;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c219); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c452(s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$parsestring_constants_escape();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseSTAR();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c453(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        s2 = peg$parseident();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseDOT();\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsecolumn();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseDOUBLE_ARROW();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseSINGLE_ARROW();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseliteral_string();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseliteral_numeric();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c454(s1, s3, s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseident();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$currPos;\n            s3 = peg$parse__();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseDOT();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parse__();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parseident();\n                  if (s6 !== peg$FAILED) {\n                    s3 = [s3, s4, s5, s6];\n                    s2 = s3;\n                  } else {\n                    peg$currPos = s2;\n                    s2 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s2;\n                  s2 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$currPos;\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseDOT();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parsecolumn();\n                    if (s7 !== peg$FAILED) {\n                      s4 = [s4, s5, s6, s7];\n                      s3 = s4;\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c455(s1, s2, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseident();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseDOT();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsecolumn();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c456(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parsecolumn();\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c457(s1);\n              }\n              s0 = s1;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c265(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c458(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c459(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c460(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c461(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseLPAREN();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecolumn_list();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseRPAREN();\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c462(s1, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = peg$currPos;\n        s2 = peg$c463(s1);\n        if (s2) {\n          s2 = peg$FAILED;\n        } else {\n          s2 = void 0;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c464(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsequoted_ident();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c465(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c466;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c467); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c468.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c469); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c468.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c469); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c466;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c467); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c470(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c218;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c219); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c471.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c472); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c471.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c472); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c218;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c219); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c470(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c473;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c474); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c475.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c476); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c475.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c476); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c473;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c474); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c470(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c458(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c477(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c478(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c479(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c480.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c481); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c482.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c483); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c484.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c485); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c486;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c487); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c488(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_UPDATE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c489(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_UPDATE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c490(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c491) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c492); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c493(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c491) {\n        s1 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c492); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c494(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_array_agg();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_func() {\n    var s0;\n\n    s0 = peg$parsewindow_fun_rank();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_fun_laglead();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsewindow_fun_firstlast();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_rank() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WIN_FNS_RANK();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseover_partition();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c495(s1, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_laglead() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LAG_LEAD();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseconsider_nulls_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c496(s1, s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_fun_firstlast() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FIRST_LAST_VALUE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseconsider_nulls_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseover_partition();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c497(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FIRST_LAST_VALUE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c498) {\n      s0 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c499); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c500) {\n        s0 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c501); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WIN_FNS_RANK() {\n    var s0;\n\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c502) {\n      s0 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c503); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 10).toLowerCase() === peg$c504) {\n        s0 = input.substr(peg$currPos, 10);\n        peg$currPos += 10;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c505); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c506) {\n          s0 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c507); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LAG_LEAD() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c508) {\n      s0 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c509); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 4).toLowerCase() === peg$c510) {\n        s0 = input.substr(peg$currPos, 4);\n        peg$currPos += 4;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c511); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c512) {\n          s0 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c513); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseconsider_nulls_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c514) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c515); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c516) {\n        s1 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c517); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c44) {\n          s3 = input.substr(peg$currPos, 5);\n          peg$currPos += 5;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c45); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c518(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c519(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_GROUP_CONCAT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c520(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 15).toLowerCase() === peg$c521) {\n        s1 = input.substr(peg$currPos, 15);\n        peg$currPos += 15;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c522); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c523) {\n          s1 = input.substr(peg$currPos, 15);\n          peg$currPos += 15;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c524); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseliteral_numeric();\n              if (s5 === peg$FAILED) {\n                s5 = peg$parseliteral_array();\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 6).toLowerCase() === peg$c525) {\n                        s9 = input.substr(peg$currPos, 6);\n                        peg$currPos += 6;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c526); }\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_GROUP();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseLPAREN();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseorder_by_clause();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        s18 = peg$parse__();\n                                        if (s18 !== peg$FAILED) {\n                                          s19 = peg$parseover_partition();\n                                          if (s19 === peg$FAILED) {\n                                            s19 = null;\n                                          }\n                                          if (s19 !== peg$FAILED) {\n                                            peg$savedPos = s0;\n                                            s1 = peg$c527(s1, s5, s15, s19);\n                                            s0 = s1;\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c247) {\n          s1 = input.substr(peg$currPos, 4);\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c528); }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseRPAREN();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c525) {\n                      s7 = input.substr(peg$currPos, 6);\n                      peg$currPos += 6;\n                    } else {\n                      s7 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c526); }\n                    }\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_GROUP();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseorder_by_clause();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseRPAREN();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseover_partition();\n                                        if (s17 === peg$FAILED) {\n                                          s17 = null;\n                                        }\n                                        if (s17 !== peg$FAILED) {\n                                          peg$savedPos = s0;\n                                          s1 = peg$c529(s1, s13, s17);\n                                          s0 = s1;\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedistinct_args() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DISTINCT();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_ref();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c530(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseorder_by_clause();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c531(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c532(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedistinct_args();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_array_agg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY_AGG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedistinct_args();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseorder_by_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c533(s1, s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c438;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c534();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetrim_position() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c535) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c536); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c537) {\n        s0 = input.substr(peg$currPos, 7);\n        peg$currPos += 7;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c538); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c539) {\n          s0 = input.substr(peg$currPos, 8);\n          peg$currPos += 8;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c540); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_rem() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetrim_position();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral_string();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_FROM();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c541(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetrim_func_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c542) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetrim_rem();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c544(s5, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parsetrim_func_clause();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c545(s1, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c546(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseextract_func();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parsescalar_func();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseon_update_current_timestamp();\n                if (s3 === peg$FAILED) {\n                  s3 = null;\n                }\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c547(s1, s3);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c548) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c550) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c551); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c552) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c553); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c554) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c555); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c556) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c557); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c558) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c559); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c560) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c561); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c562) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c563); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c564) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c565); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c566) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c567); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c568) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c569); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c570) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c571); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c572) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c573); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c574) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c575); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c576) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c577); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c578) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c579); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c580) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c581); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c582) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c583); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c584) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c585); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c586) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c587); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c588) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c589); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c590();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c591(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_CURRENT_USER();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_USER();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_SESSION_USER();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parseKW_SYSTEM_USER();\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseaggr_func();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_func();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parsefunc_call();\n              if (s3 === peg$FAILED) {\n                s3 = peg$parsecase_expr();\n                if (s3 === peg$FAILED) {\n                  s3 = peg$parseinterval_expr();\n                  if (s3 === peg$FAILED) {\n                    s3 = peg$parsecolumn_ref();\n                    if (s3 === peg$FAILED) {\n                      s3 = peg$parseparam();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_DOUBLE_COLON();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsedata_type();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsealias_clause();\n                      if (s10 === peg$FAILED) {\n                        s10 = null;\n                      }\n                      if (s10 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c592(s3, s7, s8, s10);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseliteral();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseaggr_func();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsewindow_func();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parsefunc_call();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parsecase_expr();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseinterval_expr();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parsecolumn_ref();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseparam();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DOUBLE_COLON();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsedata_type();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsealias_clause();\n                if (s6 === peg$FAILED) {\n                  s6 = null;\n                }\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c593(s1, s3, s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsedata_type();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseRPAREN();\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c594(s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parseKW_DECIMAL();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseLPAREN();\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseint();\n                                  if (s13 !== peg$FAILED) {\n                                    s14 = peg$parse__();\n                                    if (s14 !== peg$FAILED) {\n                                      s15 = peg$parseRPAREN();\n                                      if (s15 !== peg$FAILED) {\n                                        s16 = peg$parse__();\n                                        if (s16 !== peg$FAILED) {\n                                          s17 = peg$parseRPAREN();\n                                          if (s17 !== peg$FAILED) {\n                                            peg$savedPos = s0;\n                                            s1 = peg$c595(s5, s13);\n                                            s0 = s1;\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_CAST();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseLPAREN();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseexpr();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parseKW_AS();\n                        if (s7 !== peg$FAILED) {\n                          s8 = peg$parse__();\n                          if (s8 !== peg$FAILED) {\n                            s9 = peg$parseKW_DECIMAL();\n                            if (s9 !== peg$FAILED) {\n                              s10 = peg$parse__();\n                              if (s10 !== peg$FAILED) {\n                                s11 = peg$parseLPAREN();\n                                if (s11 !== peg$FAILED) {\n                                  s12 = peg$parse__();\n                                  if (s12 !== peg$FAILED) {\n                                    s13 = peg$parseint();\n                                    if (s13 !== peg$FAILED) {\n                                      s14 = peg$parse__();\n                                      if (s14 !== peg$FAILED) {\n                                        s15 = peg$parseCOMMA();\n                                        if (s15 !== peg$FAILED) {\n                                          s16 = peg$parse__();\n                                          if (s16 !== peg$FAILED) {\n                                            s17 = peg$parseint();\n                                            if (s17 !== peg$FAILED) {\n                                              s18 = peg$parse__();\n                                              if (s18 !== peg$FAILED) {\n                                                s19 = peg$parseRPAREN();\n                                                if (s19 !== peg$FAILED) {\n                                                  s20 = peg$parse__();\n                                                  if (s20 !== peg$FAILED) {\n                                                    s21 = peg$parseRPAREN();\n                                                    if (s21 !== peg$FAILED) {\n                                                      peg$savedPos = s0;\n                                                      s1 = peg$c596(s5, s13, s17);\n                                                      s0 = s1;\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              s1 = peg$parseKW_CAST();\n              if (s1 !== peg$FAILED) {\n                s2 = peg$parse__();\n                if (s2 !== peg$FAILED) {\n                  s3 = peg$parseLPAREN();\n                  if (s3 !== peg$FAILED) {\n                    s4 = peg$parse__();\n                    if (s4 !== peg$FAILED) {\n                      s5 = peg$parseexpr();\n                      if (s5 !== peg$FAILED) {\n                        s6 = peg$parse__();\n                        if (s6 !== peg$FAILED) {\n                          s7 = peg$parseKW_AS();\n                          if (s7 !== peg$FAILED) {\n                            s8 = peg$parse__();\n                            if (s8 !== peg$FAILED) {\n                              s9 = peg$parsesignedness();\n                              if (s9 !== peg$FAILED) {\n                                s10 = peg$parse__();\n                                if (s10 !== peg$FAILED) {\n                                  s11 = peg$parseKW_INTEGER();\n                                  if (s11 === peg$FAILED) {\n                                    s11 = null;\n                                  }\n                                  if (s11 !== peg$FAILED) {\n                                    s12 = peg$parse__();\n                                    if (s12 !== peg$FAILED) {\n                                      s13 = peg$parseRPAREN();\n                                      if (s13 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c597(s5, s9, s11);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseliteral_array();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_array() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRBRAKE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c598(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c599(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c600();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c601();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c602();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c603();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s2 = peg$c218;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c219); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      s4 = peg$parsesingle_char();\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        s4 = peg$parsesingle_char();\n      }\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c218;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c219); }\n        }\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c604.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c605); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c604.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c605); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s5 = peg$c218;\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c219); }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = [];\n            s7 = peg$parsesingle_char();\n            while (s7 !== peg$FAILED) {\n              s6.push(s7);\n              s7 = peg$parsesingle_char();\n            }\n            if (s6 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 39) {\n                s7 = peg$c218;\n                peg$currPos++;\n              } else {\n                s7 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c219); }\n              }\n              if (s7 !== peg$FAILED) {\n                s5 = [s5, s6, s7];\n                s4 = s5;\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s4;\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c606(s1, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 39) {\n        s2 = peg$c218;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c219); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsesingle_char();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsesingle_char();\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 39) {\n            s4 = peg$c218;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c219); }\n          }\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c607(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s2 = peg$c466;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c467); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parsesingle_quote_char();\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsesingle_quote_char();\n          }\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 34) {\n              s4 = peg$c466;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c467); }\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$currPos;\n          peg$silentFails++;\n          s3 = peg$parseDOT();\n          peg$silentFails--;\n          if (s3 === peg$FAILED) {\n            s2 = void 0;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c608(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c218;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c219); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c218;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c219); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c609(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c466;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c467); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c466;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c467); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c610(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c611.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c613.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c614); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c615) {\n      s1 = peg$c615;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c616); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c617();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c618) {\n        s1 = peg$c618;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c619); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c620();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c621) {\n          s1 = peg$c621;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c622); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c623();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c624) {\n            s1 = peg$c624;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c625); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c626();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c627) {\n              s1 = peg$c627;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c628); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c629();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c630) {\n                s1 = peg$c630;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c631); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c632();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c633) {\n                  s1 = peg$c633;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c634); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c635();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c636) {\n                    s1 = peg$c636;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c637); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c638();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c639) {\n                      s1 = peg$c639;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c640); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c641();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c642) {\n                        s1 = peg$c642;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c643); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c644(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c645;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c646); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c647();\n                        }\n                        s0 = s1;\n                        if (s0 === peg$FAILED) {\n                          s0 = peg$currPos;\n                          if (input.substr(peg$currPos, 2) === peg$c648) {\n                            s1 = peg$c648;\n                            peg$currPos += 2;\n                          } else {\n                            s1 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c649); }\n                          }\n                          if (s1 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c650();\n                          }\n                          s0 = s1;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c651.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c652); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c653(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c654(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c655(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c656(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c657(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c435;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c436); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c433;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c434); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c658(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c435;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c436); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c433;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c434); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c659(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c660;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c662(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c663(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c664(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c665.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c667.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c668); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c669.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c670); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c671.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c672); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c673(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c674) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c675); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c81) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c82); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c676) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c677); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c678) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c679); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c680) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c681); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c682) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c683); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SHOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c684) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c685); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c686) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c687); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c688();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c689) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c690); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c691) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c692); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c693) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c694); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UPDATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c695) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c696); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CREATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c697) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c698); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMPORARY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c699) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c700); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c701();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c702) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c703); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c704();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c705) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c706); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DELETE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c707) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c708); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INSERT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c709) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c710); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c711) {\n      s1 = peg$c711;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c712); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REPLACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c713) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c714); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURNING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c715) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c716); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c717();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RENAME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c718) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c719); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c514) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c515); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c720) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c721); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c722) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c723); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c724();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c725) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c726); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c727) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c728); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c194) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c195); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c112) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c729) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c730); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c731) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c732); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c733();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATABASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c734) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c735); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c736();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SCHEME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c737) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c738); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c739();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SEQUENCE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c740) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c741); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c742();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLESPACE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c743) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c744); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c745();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c199) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c200); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c746();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c160) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c161); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c747) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c748); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c749) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c750); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c751) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c752); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c753) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c754); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c755) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c756); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c757) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c758); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c759) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c760); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c761) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c762); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c763) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c764); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c765) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c766); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c297) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c298); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c767) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c768); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c769) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c770); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c771) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c772); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c773) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c774); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c775) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c776); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c777) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c778); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c779) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c780); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c781();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c782) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c783); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c784();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c785) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c786); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c787();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c788) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c789); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c790();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c791) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c792); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c793();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c794) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c795); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c796();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c231) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c232); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c797();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c798) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c799); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c800();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c801) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c802); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c803();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ILIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c804) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c805); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c806();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c807) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c808); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c809();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c172) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c173); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c810();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c811) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c812); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c813();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c814) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c815); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c816();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c817) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c818); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c819();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY_AGG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c820) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c821); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c822();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c823) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c824); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c825();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP_CONCAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c826) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c827); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c828();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c829) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c830); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c831();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c832) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c833); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c834();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c835) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c836); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c837();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c838) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c839); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c840();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c841) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c842); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c843();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c844) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c845); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c846();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c847) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c848); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c849) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c850); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c851) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c852); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c853) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c854); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c855) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c856); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c857) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c858); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c859) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c860); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c861();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOLEAN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c862) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c863); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c864();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c865) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c866); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c867();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c868) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c869); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c870();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c871) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c872); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c873();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c874) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c875); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c876();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c877) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c878); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c879();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c880) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c881); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c882();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c883) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c884); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c885();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c886) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c887); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c888();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c889) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c890); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c891();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c892) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c893); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c894();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSONB() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c895) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c896); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c897();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOMETRY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c898) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c899); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c900();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c901) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c902); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c903();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SERIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c904) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c905); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c906();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c907) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c908); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c909();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c910) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c911); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c912();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c913) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c914); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c915();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c916) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c917); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c918();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c919) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c920); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c921();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c922) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c923); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c924();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ENUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c925) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c926); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c927();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c928) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c929); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c930();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c931) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c932); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c933();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c934) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c935); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c936();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c937) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c938); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c939();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c940) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c941); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c942();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c943) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c944); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c945();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c946) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c947); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c948();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c949) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c950); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c951();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c952) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c953); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c954();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UUID() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c955) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c956); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c957();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c958) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c959); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c960();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c961) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c962); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c963();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c964) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c965); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c966();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c588) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c589); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c967();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c574) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c575); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c968();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c550) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c551); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c969();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c560) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c561); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c970();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c971();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c972();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c973) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c974); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c975();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c976) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c977); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c978();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c979) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c980); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c981();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c982) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c983); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c984();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SYSTEM_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 11).toLowerCase() === peg$c985) {\n      s1 = input.substr(peg$currPos, 11);\n      peg$currPos += 11;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c986); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c987();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c988) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c989); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c990();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c991) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c992); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c993();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c994) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c995); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c996();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c997) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c998); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c999();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1000) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1001); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1002();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 64) {\n      s0 = peg$c1003;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1004); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR__PRE_AT_AT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1005) {\n      s0 = peg$c1005;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1006); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE_DOLLAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 36) {\n      s0 = peg$c446;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c447); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VAR_PRE() {\n    var s0;\n\n    s0 = peg$parseKW_VAR__PRE_AT_AT();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_VAR__PRE_AT();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_VAR_PRE_DOLLAR();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RETURN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1007) {\n      s0 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1008); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGN() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1009) {\n      s0 = peg$c1009;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1010); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE_COLON() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1011) {\n      s0 = peg$c1011;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1012); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASSIGIN_EQUAL() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 61) {\n      s0 = peg$c363;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DUAL() {\n    var s0;\n\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c1013) {\n      s0 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1014); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c1015) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1016); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1017();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c1018) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1019); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1020();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c1021) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1022); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1023();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c59) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c60); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1024();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c1025) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1026); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1027();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SPATIAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1028) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1029); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1030();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c57) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c58); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1031();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY_BLOCK_SIZE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c204) {\n      s1 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c205); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1032();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c1033) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1034); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1035();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1036) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1037); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1038();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONCURRENTLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1039) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1040); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1041();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c1042) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1043); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1044();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CALC_FOUND_ROWS() {\n    var s0;\n\n    if (input.substr(peg$currPos, 19).toLowerCase() === peg$c1045) {\n      s0 = input.substr(peg$currPos, 19);\n      peg$currPos += 19;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1046); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c1047) {\n      s0 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1048); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_NO_CACHE() {\n    var s0;\n\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c1049) {\n      s0 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1050); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_SMALL_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 16).toLowerCase() === peg$c1051) {\n      s0 = input.substr(peg$currPos, 16);\n      peg$currPos += 16;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1052); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BIG_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 14).toLowerCase() === peg$c1053) {\n      s0 = input.substr(peg$currPos, 14);\n      peg$currPos += 14;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1054); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPT_SQL_BUFFER_RESULT() {\n    var s0;\n\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c1055) {\n      s0 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1056); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c660;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c1057;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1058); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c438;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c439); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c257;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c258); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c259;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c260); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c1059;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1060); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c1061;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1062); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c1063;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1064); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSINGLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1065) {\n      s0 = peg$c1065;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1066); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c1067) {\n      s0 = peg$c1067;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1068); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseWELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1069) {\n      s0 = peg$c1069;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1070); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOUBLE_WELL_ARROW() {\n    var s0;\n\n    if (input.substr(peg$currPos, 3) === peg$c1071) {\n      s0 = peg$c1071;\n      peg$currPos += 3;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1072); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1073) {\n      s0 = peg$c1073;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1074); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c1075) {\n      s0 = peg$c1075;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1076); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1077) {\n      s1 = peg$c1077;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1078); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c1079) {\n        s5 = peg$c1079;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1080); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c1079) {\n          s5 = peg$c1079;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1080); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c1079) {\n          s3 = peg$c1079;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1080); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c1081) {\n      s1 = peg$c1081;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1082); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c1083;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1084); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsekeyword_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COMMENT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGIN_EQUAL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseliteral_string();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1085(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1086); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c1087.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1088); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c651.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c652); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c651.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c652); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1086); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmts() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parseproc_stmt();\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parseproc_stmt();\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    peg$savedPos = peg$currPos;\n    s1 = peg$c1089();\n    if (s1) {\n      s1 = void 0;\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseassign_stmt();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsereturn_stmt();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1090(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseassign_stmt() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsewithout_prefix_var_decl();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ASSIGN();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASSIGIN_EQUAL();\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_expr();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1091(s1, s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsereturn_stmt() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_RETURN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1092(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_expr() {\n    var s0;\n\n    s0 = peg$parseselect_stmt();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseproc_join();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_additive_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseproc_array();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_additive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_multiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_multiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_multiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_multiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c387(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsevar_decl();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsejoin_op();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsevar_decl();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseon_clause();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1093(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parseliteral();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsevar_decl();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseproc_func_call();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseparam();\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseLPAREN();\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseproc_additive_expr();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parse__();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parseRPAREN();\n                    if (s5 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1094(s3);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident_name();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1095(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_func_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseproc_primary_list();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1096(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1097(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_primary_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseproc_primary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseproc_primary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseproc_primary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1098(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_array() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseproc_primary_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1099(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsevar_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_VAR_PRE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewithout_prefix_var_decl();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1100(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewithout_prefix_var_decl() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemem_chain();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1101(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemem_chain() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s3 = peg$c660;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parseident_name();\n      if (s4 !== peg$FAILED) {\n        s3 = [s3, s4];\n        s2 = s3;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s3 = peg$c660;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c661); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseident_name();\n        if (s4 !== peg$FAILED) {\n          s3 = [s3, s4];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1102(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsearray_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsecharacter_string_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsenumeric_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsedatetime_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsejson_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsegeometry_type();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsetext_type();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseuuid_type();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$parseboolean_type();\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$parseenum_type();\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$parseserial_interval_type();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumeric_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecharacter_string_type();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLBRAKE();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRBRAKE();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c1103(s1);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsenumeric_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecharacter_string_type();\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLBRAKE();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRBRAKE();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1104(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseboolean_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BOOL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOLEAN();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1105(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CHAR();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_VARCHAR();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c665.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c666); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c665.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c666); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1106(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CHAR();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1107(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_VARCHAR();\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1108(s1);\n        }\n        s0 = s1;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type_suffix() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNSIGNED();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ZEROFILL();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1109(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DECIMAL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_INT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INTEGER();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_SMALLINT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_TINYINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_BIGINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_FLOAT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_DOUBLE();\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c665.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c666); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c665.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c666); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                s8 = peg$parseCOMMA();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parse__();\n                  if (s9 !== peg$FAILED) {\n                    s10 = [];\n                    if (peg$c665.test(input.charAt(peg$currPos))) {\n                      s11 = input.charAt(peg$currPos);\n                      peg$currPos++;\n                    } else {\n                      s11 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n                    }\n                    if (s11 !== peg$FAILED) {\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        if (peg$c665.test(input.charAt(peg$currPos))) {\n                          s11 = input.charAt(peg$currPos);\n                          peg$currPos++;\n                        } else {\n                          s11 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c666); }\n                        }\n                      }\n                    } else {\n                      s10 = peg$FAILED;\n                    }\n                    if (s10 !== peg$FAILED) {\n                      s8 = [s8, s9, s10];\n                      s7 = s8;\n                    } else {\n                      peg$currPos = s7;\n                      s7 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s7;\n                    s7 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumeric_type_suffix();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c1110(s1, s5, s7, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_NUMERIC();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DECIMAL();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_INT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INTEGER();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_SMALLINT();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_TINYINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_BIGINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_FLOAT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_DOUBLE();\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        if (peg$c665.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c666); }\n        }\n        if (s3 !== peg$FAILED) {\n          while (s3 !== peg$FAILED) {\n            s2.push(s3);\n            if (peg$c665.test(input.charAt(peg$currPos))) {\n              s3 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c666); }\n            }\n          }\n        } else {\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsenumeric_type_suffix();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c1111(s1, s2, s4);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NUMERIC();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DECIMAL();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_INT();\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseKW_INTEGER();\n              if (s1 === peg$FAILED) {\n                s1 = peg$parseKW_SMALLINT();\n                if (s1 === peg$FAILED) {\n                  s1 = peg$parseKW_TINYINT();\n                  if (s1 === peg$FAILED) {\n                    s1 = peg$parseKW_BIGINT();\n                    if (s1 === peg$FAILED) {\n                      s1 = peg$parseKW_FLOAT();\n                      if (s1 === peg$FAILED) {\n                        s1 = peg$parseKW_DOUBLE();\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenumeric_type_suffix();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c1112(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c665.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c666); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c665.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c666); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c1113(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1108(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseenum_type() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ENUM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsevalue_item();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1114(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsejson_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_JSON();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_JSONB();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1108(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsegeometry_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GEOMETRY();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1115(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseserial_interval_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SERIAL();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INTERVAL();\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1108(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsetext_type() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TINYTEXT();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_TEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_MEDIUMTEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_LONGTEXT();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseLBRAKE();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseRBRAKE();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c1116(s1);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TINYTEXT();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TEXT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_MEDIUMTEXT();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_LONGTEXT();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1117(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseuuid_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UUID();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c1118(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      // 'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n\n      'NOT': true,\n      'NULL': true,\n      'NULLS': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      // 'REPLACE': true,\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WINDOW': true,\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n    };\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    function commonStrToLiteral(strOrLiteral) {\n      return typeof strOrLiteral === 'string' ? { type: 'same', value: strOrLiteral } : strOrLiteral\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, schema, tablesample } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    valueSQL[1] = `${commonOptionConnector('VALUES', valuesToSQL, values)}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  const result = [str]\n  if (tablesample) {\n    const tableSampleSQL = [\n      'TABLESAMPLE',\n      exprToSQL(tablesample.expr),\n      literalToSQL(tablesample.repeatable),\n    ].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  return result.join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal, columns, distinct, from, for_sys_time_as_of: forSystem = {}, for_update: forUpdate, groupby, having, limit, options, orderby, parentheses_symbol: parentheses, top, window: windowInfo, with: withInfo, where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  val.push(`${prefix || ''}${varName}`)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    const separator = args.expr.parentheses ? '' : ' '\n    str = ['DISTINCT', str].join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(keyword.toUpperCase())\n  reference.push(tablesToSQL(table))\n  reference.push(`(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  exec     : execToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}